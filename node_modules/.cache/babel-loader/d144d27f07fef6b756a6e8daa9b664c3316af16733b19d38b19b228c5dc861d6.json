{"ast":null,"code":"var _jsxFileName = \"/Users/mspolermo/git/sultan-web-app/src/components/UI/checkbox/CaretypeCheckbox.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CaretypeCheckbox = _ref => {\n  _s();\n  let {\n    name,\n    value,\n    onClick\n  } = _ref;\n  const [checked, setChecked] = useState(true);\n  function clickHandler() {\n    if (checked == true) {\n      onClick(['add', value]);\n      setChecked(!checked);\n    } else {\n      onClick(['remove', value]);\n      setChecked(!checked);\n    }\n  }\n  ;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"checkbox\",\n      name: value,\n      onClick: event => clickHandler()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: value,\n      children: name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 9\n  }, this);\n};\n_s(CaretypeCheckbox, \"aryUgSk0mPG99WIkJyykUON3SzE=\");\n_c = CaretypeCheckbox;\nexport default CaretypeCheckbox;\nvar _c;\n$RefreshReg$(_c, \"CaretypeCheckbox\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","CaretypeCheckbox","_ref","_s","name","value","onClick","checked","setChecked","clickHandler","children","type","event","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","_c","$RefreshReg$"],"sources":["/Users/mspolermo/git/sultan-web-app/src/components/UI/checkbox/CaretypeCheckbox.tsx"],"sourcesContent":["import React, {FC, useState} from \"react\";\n\ninterface CaretypeCheckboxProps {\n    name: string,\n    value: string,\n    onClick: any;\n\n}\n\nconst CaretypeCheckbox: FC<CaretypeCheckboxProps> = ({name, value, onClick}) => {\n\n\n    const [checked, setChecked] = useState(true);\n\n    function clickHandler () {\n        if (checked==true) {\n           onClick(['add', value])\n           setChecked(!checked)\n           \n        } else {\n            onClick(['remove', value]) \n            setChecked(!checked)\n        }\n    };\n\n    return (\n        <div>\n            <input type=\"checkbox\" name={value} onClick={ (event) => clickHandler()}/>\n            <label htmlFor={value}>{name}</label>    \n        </div>\n    )\n}\n\nexport default CaretypeCheckbox"],"mappings":";;AAAA,OAAOA,KAAK,IAAOC,QAAQ,QAAO,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAS1C,MAAMC,gBAA2C,GAAGC,IAAA,IAA4B;EAAAC,EAAA;EAAA,IAA3B;IAACC,IAAI;IAAEC,KAAK;IAAEC;EAAO,CAAC,GAAAJ,IAAA;EAGvE,MAAM,CAACK,OAAO,EAAEC,UAAU,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EAE5C,SAASW,YAAYA,CAAA,EAAI;IACrB,IAAIF,OAAO,IAAE,IAAI,EAAE;MAChBD,OAAO,CAAC,CAAC,KAAK,EAAED,KAAK,CAAC,CAAC;MACvBG,UAAU,CAAC,CAACD,OAAO,CAAC;IAEvB,CAAC,MAAM;MACHD,OAAO,CAAC,CAAC,QAAQ,EAAED,KAAK,CAAC,CAAC;MAC1BG,UAAU,CAAC,CAACD,OAAO,CAAC;IACxB;EACJ;EAAC;EAED,oBACIP,OAAA;IAAAU,QAAA,gBACIV,OAAA;MAAOW,IAAI,EAAC,UAAU;MAACP,IAAI,EAAEC,KAAM;MAACC,OAAO,EAAIM,KAAK,IAAKH,YAAY;IAAG;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAE,eAC1EhB,OAAA;MAAOiB,OAAO,EAAEZ,KAAM;MAAAK,QAAA,EAAEN;IAAI;MAAAS,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAS;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACnC;AAEd,CAAC;AAAAb,EAAA,CAtBKF,gBAA2C;AAAAiB,EAAA,GAA3CjB,gBAA2C;AAwBjD,eAAeA,gBAAgB;AAAA,IAAAiB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}