[{"/Users/mspolermo/git/sultan-web-app.github.io/src/index.tsx":"1","/Users/mspolermo/git/sultan-web-app.github.io/src/App.tsx":"2","/Users/mspolermo/git/sultan-web-app/src/index.tsx":"3","/Users/mspolermo/git/sultan-web-app/src/App.tsx":"4","/Users/mspolermo/git/sultan-web-app/src/components/GoodsList.tsx":"5","/Users/mspolermo/git/sultan-web-app/src/components/GoodsItem.tsx":"6","/Users/mspolermo/git/sultan-web-app/src/pages/Catalog.tsx":"7","/Users/mspolermo/git/sultan-web-app/src/pages/ProductCard.tsx":"8","/Users/mspolermo/git/sultan-web-app/src/pages/Basket.tsx":"9","/Users/mspolermo/git/sultan-web-app/src/components/UI/select/MySelect.tsx":"10","/Users/mspolermo/git/sultan-web-app/src/components/UI/button/FilterButton.tsx":"11","/Users/mspolermo/git/sultan-web-app/src/components/UI/input/MyInput.tsx":"12","/Users/mspolermo/git/sultan-web-app/src/components/CheckboxList.tsx":"13","/Users/mspolermo/git/sultan-web-app/src/components/UI/checkbox/MyCheckbox.tsx":"14","/Users/mspolermo/git/sultan-web-app/src/components/GoodsSorting.tsx":"15","/Users/mspolermo/git/sultan-web-app/src/components/CatalogBody.tsx":"16","/Users/mspolermo/git/sultan-web-app/src/components/OrdersList.tsx":"17","/Users/mspolermo/git/sultan-web-app/src/components/Header.tsx":"18","/Users/mspolermo/git/sultan-web-app/src/components/BasketItem.tsx":"19"},{"size":206,"mtime":1679820346772,"results":"20","hashOfConfig":"21"},{"size":125,"mtime":1679906436108,"results":"22","hashOfConfig":"21"},{"size":206,"mtime":1679820346772,"results":"23","hashOfConfig":"24"},{"size":2143,"mtime":1680189040228,"results":"25","hashOfConfig":"24"},{"size":983,"mtime":1680179236764,"results":"26","hashOfConfig":"24"},{"size":7120,"mtime":1680189109944,"results":"27","hashOfConfig":"24"},{"size":952,"mtime":1680183583933,"results":"28","hashOfConfig":"24"},{"size":1224,"mtime":1680189179608,"results":"29","hashOfConfig":"24"},{"size":1506,"mtime":1680197284774,"results":"30","hashOfConfig":"24"},{"size":742,"mtime":1680010968006,"results":"31","hashOfConfig":"24"},{"size":460,"mtime":1680087270247,"results":"32","hashOfConfig":"24"},{"size":338,"mtime":1680022364723,"results":"33","hashOfConfig":"24"},{"size":1716,"mtime":1680107004251,"results":"34","hashOfConfig":"24"},{"size":1302,"mtime":1680106693295,"results":"35","hashOfConfig":"24"},{"size":2583,"mtime":1680109486119,"results":"36","hashOfConfig":"24"},{"size":9954,"mtime":1680183703989,"results":"37","hashOfConfig":"24"},{"size":208,"mtime":1680164090042,"results":"38","hashOfConfig":"24"},{"size":505,"mtime":1680186667889,"results":"39","hashOfConfig":"24"},{"size":4112,"mtime":1680196816038,"results":"40","hashOfConfig":"24"},{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"dez3dd",{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1ov97ok",{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53"},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57"},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61"},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65"},{"filePath":"66","messages":"67","suppressedMessages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69"},{"filePath":"70","messages":"71","suppressedMessages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73"},{"filePath":"74","messages":"75","suppressedMessages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77"},{"filePath":"78","messages":"79","suppressedMessages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81"},{"filePath":"82","messages":"83","suppressedMessages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","suppressedMessages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88"},{"filePath":"89","messages":"90","suppressedMessages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92"},{"filePath":"93","messages":"94","suppressedMessages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"96","messages":"97","suppressedMessages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99"},{"filePath":"100","messages":"101","suppressedMessages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"103","messages":"104","suppressedMessages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106"},{"filePath":"107","messages":"108","suppressedMessages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110"},"/Users/mspolermo/git/sultan-web-app.github.io/src/index.tsx",[],[],"/Users/mspolermo/git/sultan-web-app.github.io/src/App.tsx",[],[],"/Users/mspolermo/git/sultan-web-app/src/index.tsx",[],[],"/Users/mspolermo/git/sultan-web-app/src/App.tsx",["111","112","113"],[],"import React, { useEffect, useMemo, useState } from 'react';\nimport goods from './goods/goods.json'\nimport './App.css'\n\nimport Catalog from './pages/Catalog';\nimport ProductCard from './pages/ProductCard';\nimport Basket from './pages/Basket';\nimport { BrowserRouter, Route, Routes } from 'react-router-dom';\nimport { NavLink } from 'react-router-dom';\nimport Header from './components/Header';\nimport { IGoods } from './types/types';\n\ninterface goods {\n  goods: IGoods[];\n}\n\n\nfunction App() {\n\n  const [productType, setProductType] = useState<undefined | string>('');\n  console.log(productType)\n  const [cost, setCost] = useState<number> (0)\n  \n  const [orderList, setOrderList] = useState<any>([])\n  useEffect(() => {\n    if ((productType!== undefined) && (productType!=='') ) {\n      setOrderList([...orderList, goods[+productType - 1]]);\n      setCost(Math.ceil(cost + goods[+productType - 1].price))\n    }\n  }, [productType]);  \n  //console.log(orderList)\n\n  \n  // const waitOrders = useMemo (() =>{\n  //   if ((productType!== undefined) && (productType!=='') ) {\n  //     setOrderList([...orderList, goods[+productType - 1]]);\n  //     setCost(Math.ceil(cost + goods[+productType - 1].price))\n  //   }\n  // }, [productType])\n\n  return (\n    <BrowserRouter>\n      <div>\n        <NavLink to=\"/\">Каталог товаров</NavLink>\n        <NavLink to=\"/basket\">Корзина</NavLink>\n        <Header \n            cost={cost}\n            productTypeValue={productType}\n            onProductTypeChange={setProductType}        \n        />\n      </div>\n      <div>\n        <Routes>\n          <Route path='/' element={<Catalog\n            goods={goods} \n            productTypeValue={productType}\n            onProductTypeChange={setProductType}          \n          />}></Route>\n          <Route path='/catalog/:id' element={<ProductCard\n            productTypeValue={productType}\n            onProductTypeChange={setProductType}\n          />}></Route>\n          <Route path='/basket' element={<Basket\n            orderList={orderList}\n          />}></Route>\n        </Routes>\n      </div>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","/Users/mspolermo/git/sultan-web-app/src/components/GoodsList.tsx",["114","115"],[],"import React, {FC, useEffect, useMemo, useState} from \"react\";\nimport { IGoods } from \"../types/types\";\nimport GoodsItem from \"./GoodsItem\";\nimport '../App.css'\n\ninterface GoodsListProps {\n    goods: IGoods[];\n    productTypeValue?: string;\n    onProductTypeChange?: (newType: string) => void;\n};\n\n\nconst GoodsList: FC<GoodsListProps> = ({goods, productTypeValue, onProductTypeChange}) => {\n        //BasketLogic\n    const [productType, setProductType] = useState<undefined | string>('');\n    useEffect(() => {\n        if (productType !==undefined) {onProductTypeChange?.(productType.toString())}\n      }, [productType]);\n\n\n    return (\n        <div className=\"goods-list__list\">\n            {goods.map( good => \n              <GoodsItem \n                key={good.id} \n                good={good}\n                productTypeValue={productType}\n                onProductTypeChange={setProductType}\n                />\n            )}\n        </div>\n    );\n};\n\nexport default GoodsList;","/Users/mspolermo/git/sultan-web-app/src/components/GoodsItem.tsx",["116","117"],[],"import React, {FC, useState} from \"react\";\nimport { IGoods } from \"../types/types\";\nimport '../App.css'\nimport { useNavigate } from \"react-router-dom\";\n\n\ninterface GoodsItemProps {\n    good: IGoods;\n    productTypeValue?: string;\n    onProductTypeChange?: (newType: string) => void;\n};\n\nconst GoodsItem: FC<GoodsItemProps> = ({good, productTypeValue, onProductTypeChange}) => {\n    const navigate = useNavigate();\n\n    function addOrder(e:any, good:IGoods) {\n        e.stopPropagation();\n        console.log('нажали GoodsItem')\n        onProductTypeChange?.((good.id).toString())\n\n    }\n\n    return (\n        <div \n        onClick={() => navigate('/catalog/' + (good.id - 1))}\n        className=\"goods-list__item\">\n            <div className=\"goods-list__img-block\">\n                <img className=\"goods-list__img\" src={good.image} alt=\"Img\" />\n            </div>\n            {good.sizeType == 'weight' ? (\n                <div className=\"goods-list__size\">\n                    <svg width=\"20\" height=\"15\" viewBox=\"0 0 20 15\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M13.3035 7.99994C12.7753 7.99994 12.2785 7.71869 12.0097 7.26869L10.0003 3.93743L7.9941 7.26869C7.72222 7.72181 7.22535 8.00306 6.69722 8.00306C6.5566 8.00306 6.41597 7.98431 6.2816 7.94369L2.00035 6.71868V12.2812C2.00035 12.7406 2.31285 13.1406 2.7566 13.2499L9.51285 14.9406C9.8316 15.0187 10.166 15.0187 10.4816 14.9406L17.2441 13.2499C17.6878 13.1374 18.0003 12.7374 18.0003 12.2812V6.71868L13.7191 7.94056C13.5847 7.98119 13.4441 7.99994 13.3035 7.99994ZM19.9472 4.49369L18.3378 1.28118C18.241 1.08743 18.0316 0.974934 17.816 1.00306L10.0003 1.99993L12.866 6.75306C12.9847 6.94993 13.2222 7.04368 13.4441 6.98118L19.6285 5.21556C19.9378 5.12493 20.0878 4.78118 19.9472 4.49369ZM1.66285 1.28118L0.0534711 4.49369C-0.0902789 4.78118 0.0628461 5.12493 0.369096 5.21243L6.55347 6.97806C6.77535 7.04056 7.01285 6.94681 7.1316 6.74993L10.0003 1.99993L2.1816 1.00306C1.96597 0.978059 1.75972 1.08743 1.66285 1.28118Z\" fill=\"#3F4E65\"/></svg>\n                    <p className=\"goods-list__size-description\">{good.size} г</p>\n                </div>\n                ) : (\n                    <div className=\"goods-list__size\">\n                        <svg width=\"9\" height=\"15\" viewBox=\"0 0 9 15\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M8.1 14.0625C8.05312 14.3164 7.95234 14.5361 7.79766 14.7217C7.64297 14.9072 7.44375 15 7.2 15H1.8C1.55625 15 1.35938 14.9097 1.20938 14.729C1.05937 14.5483 0.95625 14.3262 0.9 14.0625L0 8.4375V6.5625C0 6.2793 0.0914062 6.04492 0.274219 5.85938C0.457031 5.67383 0.726562 5.49072 1.08281 5.31006C1.43906 5.12939 1.65937 5.00977 1.74375 4.95117C2.11875 4.67773 2.45625 4.35547 2.75625 3.98438C3.05625 3.61328 3.27656 3.22266 3.41719 2.8125H3.15C3.02812 2.8125 2.92266 2.76611 2.83359 2.67334C2.74453 2.58057 2.7 2.4707 2.7 2.34375V0.46875C2.7 0.341797 2.74453 0.231934 2.83359 0.13916C2.92266 0.0463867 3.02812 0 3.15 0H5.85C5.97187 0 6.07734 0.0463867 6.16641 0.13916C6.25547 0.231934 6.3 0.341797 6.3 0.46875V2.34375C6.3 2.4707 6.25547 2.58057 6.16641 2.67334C6.07734 2.76611 5.97187 2.8125 5.85 2.8125H5.58281C5.86406 3.60352 6.38437 4.28711 7.14375 4.86328C7.24687 4.95117 7.48125 5.08789 7.84687 5.27344C8.2125 5.45898 8.49609 5.64941 8.69766 5.84473C8.89922 6.04004 9 6.2793 9 6.5625V8.4375L8.1 14.0625Z\" fill=\"#3F4E65\"/></svg>\n                        <p className=\"goods-list__size-description\">{good.size} мл</p>\n                    </div>\n                )}\n            <div className=\"goods-list__description\">\n                <span className=\"goods-list__title\">{good.title}</span> \n                <span className=\"goods-list__title-additional\">{good.desription}</span>\n            </div>\n            <div className=\"goods-list__info\">\n                <span className=\"goods-list__field-name\">Штрихкод: </span>\n                <span className=\"goods-list__field-value\">{good.barcode}</span>\n            </div>\n            <div className=\"goods-list__info\">\n                <span className=\"goods-list__field-name\">Производитель: </span>\n                <span className=\"goods-list__field-value\">{good.producer}</span>\n            </div>\n            <div className=\"goods-list__info\">\n                <span className=\"goods-list__field-name\">Бренд: </span>\n                <span className=\"goods-list__field-value\">{good.brand}</span>\n                </div>\n            <div className=\"goods-list__bottom-item\">\n                <p className=\"goods-list__price\">{good.price} ₸</p>\n                <button onClick={(e) => addOrder(e, good)} className=\"goods-list__btn\">\n                    В корзину\n                    <svg width=\"25\" height=\"18\" viewBox=\"0 0 25 18\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M24.448 4.09209C24.2955 3.87908 24.0909 3.77258 23.8341 3.77258H7.48756L7.0439 2.61757C6.93156 2.23889 6.77908 1.91543 6.58649 1.6472C6.39389 1.37897 6.18926 1.18963 5.97259 1.07918C5.75592 0.968728 5.56734 0.893781 5.40684 0.854335C5.24635 0.814889 5.08585 0.795166 4.92536 0.795166H1.62717C1.41852 0.795166 1.24198 0.866169 1.09753 1.00817C0.953083 1.15018 0.880859 1.33163 0.880859 1.55253C0.880859 1.67876 0.912959 1.80104 0.977157 1.91938C1.04136 2.03772 1.13364 2.12844 1.25401 2.19155C1.37438 2.25467 1.49877 2.28622 1.62717 2.28622H4.92536C4.98955 2.28622 5.04974 2.29411 5.10591 2.30989C5.16209 2.32567 5.23832 2.39273 5.33462 2.51107C5.43092 2.62941 5.51117 2.80691 5.57537 3.04359L9.02832 12.5248C9.06042 12.6195 9.11258 12.7102 9.1848 12.797C9.25703 12.8838 9.34129 12.9508 9.43758 12.9982C9.53388 13.0455 9.6382 13.0692 9.75055 13.0692H20.1507C20.3112 13.0692 20.4596 13.0218 20.5961 12.9272C20.7325 12.8325 20.8248 12.7142 20.8729 12.5722L24.5563 4.79029C24.6365 4.53783 24.6004 4.3051 24.448 4.09209ZM19.621 11.5545H10.3524L7.89682 5.2873H22.7266L19.621 11.5545ZM18.2328 13.8905C17.7031 13.8905 17.2497 14.0759 16.8726 14.4467C16.4954 14.8175 16.3068 15.2633 16.3068 15.784C16.3068 16.3047 16.4954 16.7504 16.8726 17.1212C17.2497 17.492 17.7031 17.6774 18.2328 17.6774C18.7624 17.6774 19.2158 17.492 19.593 17.1212C19.9701 16.7504 20.1587 16.3047 20.1587 15.784C20.1587 15.2633 19.9701 14.8175 19.593 14.4467C19.2158 14.0759 18.7624 13.8905 18.2328 13.8905ZM11.2993 13.8905C10.9462 13.8905 10.6212 13.9773 10.3243 14.1509C10.0274 14.3245 9.79469 14.5532 9.62617 14.8373C9.45765 15.1213 9.37339 15.4368 9.37339 15.784C9.37339 16.3047 9.56197 16.7504 9.93913 17.1212C10.3163 17.492 10.7697 17.6774 11.2993 17.6774C11.829 17.6774 12.2824 17.492 12.6595 17.1212C13.0367 16.7504 13.2253 16.3047 13.2253 15.784C13.2253 15.6577 13.2133 15.5315 13.1892 15.4053C13.1651 15.2791 13.129 15.1607 13.0808 15.0503C13.0327 14.9398 12.9725 14.8333 12.9003 14.7308C12.8281 14.6282 12.7478 14.5335 12.6595 14.4467C12.5713 14.36 12.475 14.2811 12.3706 14.2101C12.2663 14.1391 12.158 14.0799 12.0456 14.0326C11.9333 13.9852 11.8129 13.9497 11.6845 13.9261C11.5561 13.9024 11.4277 13.8905 11.2993 13.8905Z\" fill=\"white\"/></svg>\n                </button>\n            </div>\n      </div>\n    )\n}\n\nexport default GoodsItem;","/Users/mspolermo/git/sultan-web-app/src/pages/Catalog.tsx",["118","119","120"],[],"import React, {FC, useEffect, useMemo, useState} from \"react\";\nimport '../App.css'\nimport CatalogBody from \"../components/CatalogBody\";\nimport Header from \"../components/Header\";\nimport { IGoods } from \"../types/types\";\n\ninterface CatalogProps {\n    goods: IGoods[];\n    productTypeValue?: string;\n    onProductTypeChange?: (newType: string) => void;\n}\n\nconst Catalog: FC<CatalogProps> = ({goods, productTypeValue, onProductTypeChange}) => {\n\n    const [productType, setProductType] = useState<undefined | string>('');\n    useEffect(() => {\n        if (productType !==undefined) {onProductTypeChange?.(productType.toString())}\n      }, [productType]);\n\n    \n    return (\n        <div>\n            <CatalogBody\n                goods={goods} \n                productTypeValue={productType}\n                onProductTypeChange={setProductType}\n            />\n            <div className=\"footer\">FOOTER</div>\n      </div>\n    );\n};\n\nexport default Catalog;","/Users/mspolermo/git/sultan-web-app/src/pages/ProductCard.tsx",["121","122"],[],"import React, {FC, useEffect, useState} from \"react\";\nimport goods from '../goods/goods.json'\nimport '../App.css'\nimport GoodsItem from \"../components/GoodsItem\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport Header from \"../components/Header\";\n\n\ntype ProductCardParams = {\n    id: string;\n}\n\ninterface ProductCardProps {\n    productTypeValue?: string;\n    onProductTypeChange?: (newType: string) => void;\n}\n\nconst ProductCard: FC<ProductCardProps> = ({productTypeValue, onProductTypeChange}) => {\n    const params = useParams<ProductCardParams>();\n    const navigate = useNavigate();\n  \n        //Basket\n    const [productType, setProductType] = useState<undefined | string>('');\n    useEffect(() => {\n        if (productType !==undefined) {onProductTypeChange?.(productType.toString())}\n      }, [productType]);\n\n\n    return (\n        <div>\n            <button onClick={() => {navigate('/')}}>Назад</button>\n            <GoodsItem \n                good={goods[Number(params.id)]}\n                productTypeValue={productType}\n                onProductTypeChange={setProductType}\n            />\n            <div className=\"footer\">FOOTER</div>\n        </div>\n    );\n};\n\nexport default ProductCard;","/Users/mspolermo/git/sultan-web-app/src/pages/Basket.tsx",["123","124","125","126","127"],[],"import React, {FC, useEffect, useMemo, useState} from \"react\";\nimport '../App.css'\nimport BasketItem from \"../components/BasketItem\";\nimport GoodsItem from \"../components/GoodsItem\";\nimport Header from \"../components/Header\";\nimport OrdersList from \"../components/OrdersList\";\nimport { IGoods } from \"../types/types\";\n\ninterface BasketProps{\n    orderList: IGoods[];\n}\n\nconst Basket: FC<BasketProps> = ({orderList}) => {\n    // productType\n    const [total, setTotal] = useState<undefined | number>();\n    //const [totalCount, setTotalCount] = useState<undefined | number>();\n    console.log(total)\n\n    // const totalCountChanger = useEffect (() => {\n    //     if (totalCount==undefined) {\n    //         setTotalCount(total)\n    //     }\n    //     if ((total!==undefined) &&  (totalCount!==undefined)){\n    //     setTotalCount(totalCount+total)\n    //     }\n    // }, [total])\n    // console.log(totalCount)\n\n\n    \n    return (\n        <div>\n            <div>КОРЗИНА</div>\n            <div className=\"goods-list__list\">\n            {orderList.map( order => \n                <div key={order.id} >\n                    <BasketItem \n                        order={order}\n                        onTotalChange={setTotal} \n                    />\n                </div>    \n            )}\n            <button>Оформить заказ</button>\n            <p>Итого: {total} ₸</p>\n        </div>\n            <div className=\"footer\">FOOTER</div>\n        </div>\n    );\n};\n\nexport default Basket;","/Users/mspolermo/git/sultan-web-app/src/components/UI/select/MySelect.tsx",["128"],[],"import { type } from \"os\";\nimport React, {FC} from \"react\";\n\ninterface MySelectProps {\n    options: OptionsPropery[];\n    defaultValue: string;\n    value: string;\n    onChange: (sort: string) => void;\n}\n\ninterface OptionsPropery {\n    value: string;\n    name: string;\n}\n\nconst MySelect: FC<MySelectProps> = ({options, defaultValue, value, onChange}) => {\n    return (\n        <select value={value} onChange = {event => onChange(event.target.value)}>\n            <option disabled value=\"\">{defaultValue}</option>\n            {options.map( option =>\n                <option key={option.value}\n                value={option.value}>\n                    {option.name}\n                </option>)}\n        </select>\n    )\n}\n\nexport default MySelect;","/Users/mspolermo/git/sultan-web-app/src/components/UI/button/FilterButton.tsx",["129","130"],[],"import { type } from \"os\";\nimport React, {FC} from \"react\";\n\ninterface FiletrButtonProps {\n    name: string;\n    value: any;\n    careType?: string;\n    onClick?: any;\n}\n\n\nconst FilterButton: FC<FiletrButtonProps> = ({name, value, onClick, careType}) => {\n    let clickCount = 0;\n    return (\n        <button \n            value={value} \n            onClick={(event) => onClick({careType})}\n        >{name}\n        </button>\n    )\n}\n\nexport default FilterButton;","/Users/mspolermo/git/sultan-web-app/src/components/UI/input/MyInput.tsx",[],[],"/Users/mspolermo/git/sultan-web-app/src/components/CheckboxList.tsx",["131","132"],[],"import React, {FC, useMemo, useState} from \"react\";\nimport { IGoods } from \"../types/types\";\nimport MyCheckbox from \"./UI/checkbox/MyCheckbox\";\n\ninterface CheckboxListProps {\n    value: any;\n    filtredGoodsList: IGoods[];\n    onClick?: any;\n}\n\nlet boxesArray:any = []\n\nconst CheckboxList:FC<CheckboxListProps> = ({value, filtredGoodsList, onClick}) => {\n\n    let producersArray:any[] = filtredGoodsList.map( good => good.producer);\n    producersArray = producersArray.reduce((acc, i) => {\n        if (acc.hasOwnProperty(i)) {\n          acc[i] += 1;\n        } else {\n          acc[i as keyof typeof acc] = 1;\n        }\n        return acc;\n    }, []);\n    let recycledproducersArray = [];\n    for (var key in producersArray) {\n        recycledproducersArray.push([key, producersArray[key]]);\n    };\n\n    let checkboxClassnameCount = 1;\n    const [buttonChecker, setButtonChecker] = useState(false)\n    const [buttonName, setButtonName] = useState('Показать все')\n    function clickHandler() {\n        setButtonChecker(!buttonChecker)\n        if (!buttonChecker) {\n            setButtonName('Скрыть')\n        } else {\n            setButtonName('Показать все')\n        }\n    }\n\n    return (\n        <div>\n            {recycledproducersArray.map((producer) =>          \n                <MyCheckbox \n                    key={producer[0]} \n                    producer={producer}\n                    onClick = {onClick}\n                    buttonChecker={buttonChecker}\n                    checkboxClassnameCount = {checkboxClassnameCount++}\n                />)\n            }\n            <button onClick={clickHandler}>{buttonName}</button>\n        </div>\n    );\n};\n\nexport default CheckboxList","/Users/mspolermo/git/sultan-web-app/src/components/UI/checkbox/MyCheckbox.tsx",["133","134"],[],"import React, {FC, useState} from \"react\";\nimport { IGoods } from \"../../../types/types\";\n\ninterface MyCheckboxProps {\n    key: string;\n    producer: any;\n    onClick?: any;\n    checkboxClassnameCount: number;\n    buttonChecker: boolean;\n};\n\nconst MyCheckbox:FC<MyCheckboxProps> = ({producer, onClick, checkboxClassnameCount, buttonChecker}) => {\n    let checkboxClassName: string;\n\n    if (checkboxClassnameCount > 4) {\n        checkboxClassName = 'checkbox_hidden'\n    } else {\n        checkboxClassName = 'checkbox'\n    }\n    if (buttonChecker) {\n        checkboxClassName = 'checkbox'\n    }\n\n    \n    let producerName = producer[0];\n    const [checked, setChecked] = useState(true);\n\n    function clickHandler () {\n        if (checked==true) {\n           onClick(['add', producerName]) \n           setChecked(!checked)\n        } else {\n            onClick(['remove', producerName]) \n            setChecked(!checked)\n        }\n    };\n\n    return (\n        <div className={checkboxClassName}>\n            <input \n                type=\"checkbox\" \n                name={producerName}\n                onClick={ (event) => clickHandler()}\n                \n            />\n            <label htmlFor={producerName}>{producerName} ({producer[1]})</label>\n        </div>\n    );\n};\n\nexport default MyCheckbox;","/Users/mspolermo/git/sultan-web-app/src/components/GoodsSorting.tsx",["135","136","137","138","139"],[],"/Users/mspolermo/git/sultan-web-app/src/components/CatalogBody.tsx",["140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158"],[],"import React, {FC, useEffect, useMemo, useState} from \"react\";\nimport GoodsList from './GoodsList';\nimport '../App.css'\nimport MySelect from \"./UI/select/MySelect\";\nimport FilterButton from \"./UI/button/FilterButton\";\nimport { IGoods } from \"../types/types\";\nimport MyInput from \"./UI/input/MyInput\";\nimport CheckboxList from \"./CheckboxList\";\n\ninterface CatalogBodyProps {\n    goods: IGoods[];\n    productTypeValue?: string;\n    onProductTypeChange?: (newType: string) => void;\n};\n\nconst CatalogBody: FC<CatalogBodyProps> = ({goods, productTypeValue, onProductTypeChange}) => {\n    const [products, setProducts] = useState(goods)\n\n    //BasketLogic\n    const [productType, setProductType] = useState<undefined | string>('');\n    useEffect(() => {\n        if (productType !==undefined) {onProductTypeChange?.(productType.toString())}\n      }, [productType]);\n\n        //Sorting logic\n        \n    const [selectedSort, setSelectedSort] = useState('')\n    const sortGoods = (sort:string) => {\n        setSelectedSort(sort);\n        setPageNumber(1);\n    }\n    const sortedGoods:any = useMemo( () => {\n        if (!selectedSort) {\n            return products\n        } \n        let typeOfSort = (selectedSort.split('-'))\n        if ((typeOfSort[0] == 'title') && (typeOfSort.length == 1)) {\n            return ([...products].sort((a, b) => a[typeOfSort[0] as keyof typeof a].toString().localeCompare(b[typeOfSort[0] as keyof typeof b].toString())));\n        } else if ((typeOfSort[0] == 'title') && (typeOfSort.length == 2)) {\n            return  ([...products].sort((a, b) => a[typeOfSort[0] as keyof typeof a].toString().localeCompare(b[typeOfSort[0] as keyof typeof b].toString())).reverse())\n        } else if ((typeOfSort[0] == 'price') && (typeOfSort.length == 1)) {\n            return [...products].sort((a, b) => +a[typeOfSort[0] as keyof typeof a] - +b[typeOfSort[0] as keyof typeof b])\n        } else if ((typeOfSort[0] == 'price') && (typeOfSort.length == 2)) {\n            return [...products].sort((a, b) =>  +b[typeOfSort[0] as keyof typeof b] - +a[typeOfSort[0] as keyof typeof a])\n        }\n    }, [selectedSort, products])\n\n    const [selectedFilter, setSelectedFilter] = useState()\n    const filerGoods = (filter: any) => {\n        setSelectedFilter(filter);\n        setPageNumber(1);\n    }\n    const sortedAndFiltredGoods:any = useMemo( () => {\n        if(!selectedFilter) {\n            return sortedGoods\n        }\n        let typeOfFilter: {careType: string} = selectedFilter;\n        let typeOfFilterValue = typeOfFilter.careType\n        return sortedGoods.filter( (product:IGoods) => product.careType.includes(typeOfFilterValue)\n        )\n    }, [selectedFilter, sortedGoods])\n\n    const [searchProdicerQuery, setSearchProdicerQuery] = useState('')\n    const queryGoods = (sort:string) => {\n        setSearchProdicerQuery(sort);\n        setPageNumber(1);\n    }\n    const sortedFiltreadSearchedGoods = useMemo(() => {\n        return sortedAndFiltredGoods.filter( (product:IGoods) => product.producer.toLowerCase().includes(searchProdicerQuery.toLowerCase())) \n    }, [searchProdicerQuery, sortedAndFiltredGoods])\n    \n    const [minPrice, setMinPrice] = useState('')\n    const minPricing = (sort:string) => {\n        setMinPrice(sort);\n        setPageNumber(1);\n    }\n    const sortedFiltreadSearchedMinGoods = useMemo(() => {\n        return sortedFiltreadSearchedGoods.filter( (product:IGoods) => product.price > +minPrice) \n    }, [minPrice, sortedFiltreadSearchedGoods])\n\n    const [maxPrice, setMaxPrice] = useState('')\n    const maxPricing = (sort:string) => {\n        setMaxPrice(sort);\n        setPageNumber(1);\n    }\n    const sortedFiltreadSearchedPriceGoods = useMemo(() => {\n        if (maxPrice !== '') {\n            return sortedFiltreadSearchedMinGoods.filter( (product:IGoods) => product.price < +maxPrice)\n        }\n        return sortedFiltreadSearchedMinGoods\n    }, [maxPrice, sortedFiltreadSearchedMinGoods])\n\n    const [checkbox, setCheckbox] = useState()\n    const checkboxing = (sort:any) => {\n        setCheckbox(sort);\n        setPageNumber(1);\n    }\n    const [checkboxArray, setCheckboxArray] = useState([]);  \n    const checkboxArraySost = useMemo( () => {\n        if (!checkbox) return\n        if (checkbox[0] == 'add') {\n            setCheckboxArray ([...checkboxArray, checkbox[1]])\n        }else if (checkbox[0] == 'remove'){\n            setCheckboxArray(checkboxArray.filter( (producer: string) => producer !== checkbox[1]))\n        } \n    }, [checkbox])\n    const finalFiltredGoods:any = useMemo( () => {\n        if(!checkbox) {\n            return sortedFiltreadSearchedPriceGoods\n        }\n        let goodsByCheckboxArray:any = [];\n        for (let i=0; i<checkboxArray.length; i++) {\n            let pushItem = sortedFiltreadSearchedPriceGoods.filter( (product:IGoods) => product.producer.includes(checkboxArray[i]))\n            pushItem.map( (product:any) => goodsByCheckboxArray.push(product))\n        }\n        if (goodsByCheckboxArray[0] == undefined) {\n            goodsByCheckboxArray = sortedFiltreadSearchedPriceGoods\n        }\n        return goodsByCheckboxArray\n\n    }, [checkboxArray, sortedFiltreadSearchedPriceGoods])\n\n        //Pagination\n\n    const [pageNumber, setPageNumber] = useState (1)\n    const pagesArray = useMemo( () => {\n        let totalPages = Math.ceil(finalFiltredGoods.length/ 10)\n\n        let pagesArray = []\n        for (let i = 0; i< totalPages; i++) {\n            pagesArray.push(i+1)\n        } \n        return pagesArray\n    }, [finalFiltredGoods])\n    const pagingPage = useMemo( () => {\n        let choosenPage =  pagesArray.indexOf(pageNumber, 0);\n        if (choosenPage + 1 == pagesArray.length) {\n            return finalFiltredGoods.slice((choosenPage*10), finalFiltredGoods.length)\n        } else {\n            return finalFiltredGoods.slice((choosenPage*10), (choosenPage*10 + 10))\n        }\n    }, [pageNumber, finalFiltredGoods])\n\n    return (\n        <div>\n\n            <div style={{display: 'flex', justifyContent: 'space-between'}}> \n                <h3>КОСМЕТИКА И ГИГИЕНА</h3>\n                <div>\n                    <span>Сортировка: </span>\n                    <MySelect\n                        value={selectedSort}\n                        onChange={sortGoods}\n                        defaultValue='Название'\n                        options={[\n                            {value: 'price', name: 'Цена: По возрастанию'},\n                            {value: 'price-down', name: 'Цена: По убыванию'},\n                            {value: 'title', name: 'Название: По возрастанию'},\n                            {value: 'title-down', name: 'Название: По убыванию'}\n                        ]}\n                    />\n                </div> \n            </div>\n            <div> \n                <FilterButton value={selectedFilter} careType = 'body'name = 'Уход за телом'onClick={filerGoods} />\n                <FilterButton value={selectedFilter} careType = 'hands' name = 'Уход за руками' onClick={filerGoods} />\n                <FilterButton value={selectedFilter} careType = 'legs' name = 'Уход за ногами' onClick={filerGoods} />\n                <FilterButton value={selectedFilter} careType = 'face' name = 'Уход за лицом' onClick={filerGoods} />\n                <FilterButton value={selectedFilter} careType = 'hair' name = 'Уход за волосами' onClick={filerGoods} />\n                <FilterButton value={selectedFilter} careType = 'sun' name = 'Средства для загара' onClick={filerGoods} />\n                <FilterButton value={selectedFilter} careType = 'shaving' name = 'Средства для бритья' onClick={filerGoods} />\n                <FilterButton value={selectedFilter} careType = 'present' name = 'Подарочные наборы' onClick={filerGoods} />\n                <FilterButton value={selectedFilter} careType = 'hygienic' name = 'Гигиеническая продукция' onClick={filerGoods} />\n                <FilterButton value={selectedFilter} careType = 'mouth' name = 'Гигиена полости рта' onClick={filerGoods} />\n                <FilterButton value={selectedFilter} careType = 'paper' name = 'Бумажная продукция' onClick={filerGoods} />\n            </div>\n            <div className=\"body\">\n                <div> \n                    <h4>Подбор по параметрам</h4>\n                    <p>Цена</p>\n                    <MyInput \n                        value={minPrice}\n                        onChange={minPricing}\n                        placeholder = \"0\"\n                    />\n                        <MyInput \n                        value={maxPrice}\n                        onChange={maxPricing}\n                        placeholder = \"10 000\"\n                    />\n                    <h5>Производитель</h5> \n                    <MyInput \n                        value={searchProdicerQuery}\n                        onChange={queryGoods}\n                        placeholder = \"Поиск\"\n                    />\n                    <CheckboxList \n                        value={checkbox}\n                        onClick={checkboxing}\n                        filtredGoodsList={sortedFiltreadSearchedPriceGoods} \n                    />\n                </div>\n                <GoodsList \n                    goods={pagingPage} \n                    productTypeValue={productType}\n                    onProductTypeChange={setProductType}\n                />\n\n            </div>\n            <div >\n                {pagesArray.map( p =>\n                    <span \n                        key={p}\n                        onClick={() => setPageNumber(p)}\n                    >{p}</span>)}\n            </div>\n      </div>\n    );\n};\n\nexport default CatalogBody;","/Users/mspolermo/git/sultan-web-app/src/components/OrdersList.tsx",[],[],"/Users/mspolermo/git/sultan-web-app/src/components/Header.tsx",["159","160"],[],"import React, {FC, useMemo, useState} from \"react\";\nimport '../App.css'\n\n\ninterface HeaderProps {\n    cost:number;\n    productTypeValue?: string;\n    onProductTypeChange?: (newType: string) => void;\n};\n\n\n\nconst Header: FC<HeaderProps> = ({cost, productTypeValue, onProductTypeChange}) => {\n\n\n    return (\n        <div>\n            <div className=\"header\">MAIN HEADER\n                <button>Корзина: {cost} ₸</button>\n            </div>\n            \n        </div>\n    )\n}\n\nexport default Header;","/Users/mspolermo/git/sultan-web-app/src/components/BasketItem.tsx",["161","162","163","164"],[],"import React, {FC, useEffect, useMemo, useState} from \"react\";\nimport { IGoods } from \"../types/types\";\n\ninterface BasketItemProps {\n    order: IGoods;\n    totalValue?: number;\n    onTotalChange?: (newTotal: number) => void;\n};\n\nconst BasketItem: FC<BasketItemProps> = ({order, totalValue, onTotalChange}) => {\n    // productType\n    const [counter, setCounter] = useState (1)\n    const [sumOfPrice, setSumofPrice] = useState(order.price)\n\n    function upCounter () {\n        setCounter(counter+1)\n    }\n    function downCounter () {\n        if (counter>0) {\n            setCounter(counter-1)\n    }\n    }\n    const sumCount = useEffect (() => {\n        setSumofPrice((counter*order.price))\n        onTotalChange?.((sumOfPrice))\n    }, [counter, sumOfPrice])\n\n\n    return (\n        <div>\n            <div className=\"goods-list__img-block\">\n                <img className=\"goods-list__img\" src={order.image} alt=\"Img\" />\n            </div>\n            {order.sizeType == 'weight' ? (\n                <div className=\"goods-list__size\">\n                    <svg width=\"20\" height=\"15\" viewBox=\"0 0 20 15\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M13.3035 7.99994C12.7753 7.99994 12.2785 7.71869 12.0097 7.26869L10.0003 3.93743L7.9941 7.26869C7.72222 7.72181 7.22535 8.00306 6.69722 8.00306C6.5566 8.00306 6.41597 7.98431 6.2816 7.94369L2.00035 6.71868V12.2812C2.00035 12.7406 2.31285 13.1406 2.7566 13.2499L9.51285 14.9406C9.8316 15.0187 10.166 15.0187 10.4816 14.9406L17.2441 13.2499C17.6878 13.1374 18.0003 12.7374 18.0003 12.2812V6.71868L13.7191 7.94056C13.5847 7.98119 13.4441 7.99994 13.3035 7.99994ZM19.9472 4.49369L18.3378 1.28118C18.241 1.08743 18.0316 0.974934 17.816 1.00306L10.0003 1.99993L12.866 6.75306C12.9847 6.94993 13.2222 7.04368 13.4441 6.98118L19.6285 5.21556C19.9378 5.12493 20.0878 4.78118 19.9472 4.49369ZM1.66285 1.28118L0.0534711 4.49369C-0.0902789 4.78118 0.0628461 5.12493 0.369096 5.21243L6.55347 6.97806C6.77535 7.04056 7.01285 6.94681 7.1316 6.74993L10.0003 1.99993L2.1816 1.00306C1.96597 0.978059 1.75972 1.08743 1.66285 1.28118Z\" fill=\"#3F4E65\"/></svg>\n                    <p className=\"goods-list__size-description\">{order.size} г</p>\n                </div>\n            ) : (\n                <div className=\"goods-list__size\">\n                    <svg width=\"9\" height=\"15\" viewBox=\"0 0 9 15\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M8.1 14.0625C8.05312 14.3164 7.95234 14.5361 7.79766 14.7217C7.64297 14.9072 7.44375 15 7.2 15H1.8C1.55625 15 1.35938 14.9097 1.20938 14.729C1.05937 14.5483 0.95625 14.3262 0.9 14.0625L0 8.4375V6.5625C0 6.2793 0.0914062 6.04492 0.274219 5.85938C0.457031 5.67383 0.726562 5.49072 1.08281 5.31006C1.43906 5.12939 1.65937 5.00977 1.74375 4.95117C2.11875 4.67773 2.45625 4.35547 2.75625 3.98438C3.05625 3.61328 3.27656 3.22266 3.41719 2.8125H3.15C3.02812 2.8125 2.92266 2.76611 2.83359 2.67334C2.74453 2.58057 2.7 2.4707 2.7 2.34375V0.46875C2.7 0.341797 2.74453 0.231934 2.83359 0.13916C2.92266 0.0463867 3.02812 0 3.15 0H5.85C5.97187 0 6.07734 0.0463867 6.16641 0.13916C6.25547 0.231934 6.3 0.341797 6.3 0.46875V2.34375C6.3 2.4707 6.25547 2.58057 6.16641 2.67334C6.07734 2.76611 5.97187 2.8125 5.85 2.8125H5.58281C5.86406 3.60352 6.38437 4.28711 7.14375 4.86328C7.24687 4.95117 7.48125 5.08789 7.84687 5.27344C8.2125 5.45898 8.49609 5.64941 8.69766 5.84473C8.89922 6.04004 9 6.2793 9 6.5625V8.4375L8.1 14.0625Z\" fill=\"#3F4E65\"/></svg>\n                    <p className=\"goods-list__size-description\">{order.size} мл</p>\n                </div>\n            )}\n            <div className=\"goods-list__description\">\n                <span className=\"goods-list__title\">{order.title}</span> \n                <span className=\"goods-list__title-additional\">{order.desription}</span>\n            </div>\n            <button onClick= {downCounter}>-</button>\n            <p>Количество {counter}</p>\n            <button onClick= {upCounter}>+</button>\n            <p className=\"goods-list__price\">{sumOfPrice} ₸</p>\n            <button>Удалить</button>            \n        </div>\n    )\n}\nexport default BasketItem",{"ruleId":"165","severity":1,"message":"166","line":1,"column":28,"nodeType":"167","messageId":"168","endLine":1,"endColumn":35},{"ruleId":"169","severity":1,"message":"170","line":13,"column":11,"nodeType":"167","messageId":"171","endLine":13,"endColumn":16},{"ruleId":"172","severity":1,"message":"173","line":30,"column":6,"nodeType":"174","endLine":30,"endColumn":19,"suggestions":"175"},{"ruleId":"165","severity":1,"message":"166","line":1,"column":31,"nodeType":"167","messageId":"168","endLine":1,"endColumn":38},{"ruleId":"172","severity":1,"message":"176","line":18,"column":10,"nodeType":"174","endLine":18,"endColumn":23,"suggestions":"177"},{"ruleId":"165","severity":1,"message":"178","line":1,"column":20,"nodeType":"167","messageId":"168","endLine":1,"endColumn":28},{"ruleId":"179","severity":1,"message":"180","line":30,"column":28,"nodeType":"181","messageId":"182","endLine":30,"endColumn":30},{"ruleId":"165","severity":1,"message":"166","line":1,"column":31,"nodeType":"167","messageId":"168","endLine":1,"endColumn":38},{"ruleId":"165","severity":1,"message":"183","line":4,"column":8,"nodeType":"167","messageId":"168","endLine":4,"endColumn":14},{"ruleId":"172","severity":1,"message":"176","line":18,"column":10,"nodeType":"174","endLine":18,"endColumn":23,"suggestions":"184"},{"ruleId":"165","severity":1,"message":"183","line":6,"column":8,"nodeType":"167","messageId":"168","endLine":6,"endColumn":14},{"ruleId":"172","severity":1,"message":"176","line":26,"column":10,"nodeType":"174","endLine":26,"endColumn":23,"suggestions":"185"},{"ruleId":"165","severity":1,"message":"186","line":1,"column":20,"nodeType":"167","messageId":"168","endLine":1,"endColumn":29},{"ruleId":"165","severity":1,"message":"166","line":1,"column":31,"nodeType":"167","messageId":"168","endLine":1,"endColumn":38},{"ruleId":"165","severity":1,"message":"187","line":4,"column":8,"nodeType":"167","messageId":"168","endLine":4,"endColumn":17},{"ruleId":"165","severity":1,"message":"183","line":5,"column":8,"nodeType":"167","messageId":"168","endLine":5,"endColumn":14},{"ruleId":"165","severity":1,"message":"188","line":6,"column":8,"nodeType":"167","messageId":"168","endLine":6,"endColumn":18},{"ruleId":"165","severity":1,"message":"189","line":1,"column":10,"nodeType":"167","messageId":"168","endLine":1,"endColumn":14},{"ruleId":"165","severity":1,"message":"189","line":1,"column":10,"nodeType":"167","messageId":"168","endLine":1,"endColumn":14},{"ruleId":"165","severity":1,"message":"190","line":13,"column":9,"nodeType":"167","messageId":"168","endLine":13,"endColumn":19},{"ruleId":"165","severity":1,"message":"166","line":1,"column":20,"nodeType":"167","messageId":"168","endLine":1,"endColumn":27},{"ruleId":"165","severity":1,"message":"191","line":11,"column":5,"nodeType":"167","messageId":"168","endLine":11,"endColumn":19},{"ruleId":"165","severity":1,"message":"192","line":2,"column":10,"nodeType":"167","messageId":"168","endLine":2,"endColumn":16},{"ruleId":"179","severity":1,"message":"180","line":29,"column":20,"nodeType":"181","messageId":"182","endLine":29,"endColumn":22},{"ruleId":"165","severity":1,"message":"166","line":1,"column":20,"nodeType":"167","messageId":"168","endLine":1,"endColumn":27},{"ruleId":"179","severity":1,"message":"180","line":20,"column":90,"nodeType":"181","messageId":"182","endLine":20,"endColumn":92},{"ruleId":"179","severity":1,"message":"180","line":24,"column":96,"nodeType":"181","messageId":"182","endLine":24,"endColumn":98},{"ruleId":"165","severity":1,"message":"193","line":32,"column":14,"nodeType":"167","messageId":"168","endLine":32,"endColumn":28},{"ruleId":"165","severity":1,"message":"194","line":42,"column":12,"nodeType":"167","messageId":"168","endLine":42,"endColumn":26},{"ruleId":"165","severity":1,"message":"195","line":17,"column":22,"nodeType":"167","messageId":"168","endLine":17,"endColumn":33},{"ruleId":"172","severity":1,"message":"176","line":23,"column":10,"nodeType":"174","endLine":23,"endColumn":23,"suggestions":"196"},{"ruleId":"179","severity":1,"message":"180","line":37,"column":28,"nodeType":"181","messageId":"182","endLine":37,"endColumn":30},{"ruleId":"179","severity":1,"message":"180","line":37,"column":62,"nodeType":"181","messageId":"182","endLine":37,"endColumn":64},{"ruleId":"179","severity":1,"message":"180","line":39,"column":35,"nodeType":"181","messageId":"182","endLine":39,"endColumn":37},{"ruleId":"179","severity":1,"message":"180","line":39,"column":69,"nodeType":"181","messageId":"182","endLine":39,"endColumn":71},{"ruleId":"179","severity":1,"message":"180","line":41,"column":35,"nodeType":"181","messageId":"182","endLine":41,"endColumn":37},{"ruleId":"179","severity":1,"message":"180","line":41,"column":69,"nodeType":"181","messageId":"182","endLine":41,"endColumn":71},{"ruleId":"179","severity":1,"message":"180","line":43,"column":35,"nodeType":"181","messageId":"182","endLine":43,"endColumn":37},{"ruleId":"179","severity":1,"message":"180","line":43,"column":69,"nodeType":"181","messageId":"182","endLine":43,"endColumn":71},{"ruleId":"165","severity":1,"message":"197","line":99,"column":11,"nodeType":"167","messageId":"168","endLine":99,"endColumn":28},{"ruleId":"179","severity":1,"message":"180","line":101,"column":25,"nodeType":"181","messageId":"182","endLine":101,"endColumn":27},{"ruleId":"179","severity":1,"message":"180","line":103,"column":31,"nodeType":"181","messageId":"182","endLine":103,"endColumn":33},{"ruleId":"172","severity":1,"message":"198","line":106,"column":8,"nodeType":"174","endLine":106,"endColumn":18,"suggestions":"199"},{"ruleId":"200","severity":1,"message":"201","line":114,"column":27,"nodeType":"202","messageId":"203","endLine":114,"endColumn":78},{"ruleId":"179","severity":1,"message":"180","line":116,"column":37,"nodeType":"181","messageId":"182","endLine":116,"endColumn":39},{"ruleId":"172","severity":1,"message":"204","line":121,"column":8,"nodeType":"174","endLine":121,"endColumn":57,"suggestions":"205"},{"ruleId":"179","severity":1,"message":"180","line":137,"column":29,"nodeType":"181","messageId":"182","endLine":137,"endColumn":31},{"ruleId":"172","severity":1,"message":"206","line":142,"column":8,"nodeType":"174","endLine":142,"endColumn":39,"suggestions":"207"},{"ruleId":"165","severity":1,"message":"166","line":1,"column":20,"nodeType":"167","messageId":"168","endLine":1,"endColumn":27},{"ruleId":"165","severity":1,"message":"178","line":1,"column":29,"nodeType":"167","messageId":"168","endLine":1,"endColumn":37},{"ruleId":"165","severity":1,"message":"166","line":1,"column":31,"nodeType":"167","messageId":"168","endLine":1,"endColumn":38},{"ruleId":"165","severity":1,"message":"208","line":23,"column":11,"nodeType":"167","messageId":"168","endLine":23,"endColumn":19},{"ruleId":"172","severity":1,"message":"209","line":26,"column":8,"nodeType":"174","endLine":26,"endColumn":29,"suggestions":"210"},{"ruleId":"179","severity":1,"message":"180","line":34,"column":29,"nodeType":"181","messageId":"182","endLine":34,"endColumn":31},"@typescript-eslint/no-unused-vars","'useMemo' is defined but never used.","Identifier","unusedVar","@typescript-eslint/no-redeclare","'goods' is already defined.","redeclared","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'cost' and 'orderList'. Either include them or remove the dependency array. You can also do a functional update 'setOrderList(o => ...)' if you only need 'orderList' in the 'setOrderList' call.","ArrayExpression",["211"],"React Hook useEffect has a missing dependency: 'onProductTypeChange'. Either include it or remove the dependency array. If 'onProductTypeChange' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["212"],"'useState' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'Header' is defined but never used.",["213"],["214"],"'useEffect' is defined but never used.","'GoodsItem' is defined but never used.","'OrdersList' is defined but never used.","'type' is defined but never used.","'clickCount' is assigned a value but never used.","'boxesArray' is assigned a value but never used.","'IGoods' is defined but never used.","'getSortedGoods' is defined but never used.","'selectedFilter' is assigned a value but never used.","'setProducts' is assigned a value but never used.",["215"],"'checkboxArraySost' is assigned a value but never used.","React Hook useMemo has a missing dependency: 'checkboxArray'. Either include it or remove the dependency array. You can also do a functional update 'setCheckboxArray(c => ...)' if you only need 'checkboxArray' in the 'setCheckboxArray' call.",["216"],"no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'goodsByCheckboxArray'.","ArrowFunctionExpression","unsafeRefs","React Hook useMemo has a missing dependency: 'checkbox'. Either include it or remove the dependency array.",["217"],"React Hook useMemo has a missing dependency: 'pagesArray'. Either include it or remove the dependency array.",["218"],"'sumCount' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'onTotalChange' and 'order.price'. Either include them or remove the dependency array. If 'onTotalChange' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["219"],{"desc":"220","fix":"221"},{"desc":"222","fix":"223"},{"desc":"222","fix":"224"},{"desc":"222","fix":"225"},{"desc":"222","fix":"226"},{"desc":"227","fix":"228"},{"desc":"229","fix":"230"},{"desc":"231","fix":"232"},{"desc":"233","fix":"234"},"Update the dependencies array to be: [cost, orderList, productType]",{"range":"235","text":"236"},"Update the dependencies array to be: [onProductTypeChange, productType]",{"range":"237","text":"238"},{"range":"239","text":"238"},{"range":"240","text":"238"},{"range":"241","text":"238"},"Update the dependencies array to be: [checkbox, checkboxArray]",{"range":"242","text":"243"},"Update the dependencies array to be: [checkbox, checkboxArray, sortedFiltreadSearchedPriceGoods]",{"range":"244","text":"245"},"Update the dependencies array to be: [pagesArray, pageNumber, finalFiltredGoods]",{"range":"246","text":"247"},"Update the dependencies array to be: [counter, onTotalChange, order.price, sumOfPrice]",{"range":"248","text":"249"},[915,928],"[cost, orderList, productType]",[606,619],"[onProductTypeChange, productType]",[636,649],[818,831],[843,856],[4495,4505],"[checkbox, checkboxArray]",[5136,5185],"[checkbox, checkboxArray, sortedFiltreadSearchedPriceGoods]",[5900,5931],"[pagesArray, pageNumber, finalFiltredGoods]",[735,756],"[counter, onTotalChange, order.price, sumOfPrice]"]