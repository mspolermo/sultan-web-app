[{"/Users/mspolermo/git/sultan-web-app.github.io/src/index.tsx":"1","/Users/mspolermo/git/sultan-web-app.github.io/src/App.tsx":"2","/Users/mspolermo/git/sultan-web-app/src/index.tsx":"3","/Users/mspolermo/git/sultan-web-app/src/App.tsx":"4","/Users/mspolermo/git/sultan-web-app/src/components/GoodsList.tsx":"5","/Users/mspolermo/git/sultan-web-app/src/components/GoodsItem.tsx":"6","/Users/mspolermo/git/sultan-web-app/src/pages/Catalog.tsx":"7","/Users/mspolermo/git/sultan-web-app/src/pages/ProductCard.tsx":"8","/Users/mspolermo/git/sultan-web-app/src/pages/Basket.tsx":"9","/Users/mspolermo/git/sultan-web-app/src/components/UI/select/MySelect.tsx":"10","/Users/mspolermo/git/sultan-web-app/src/components/UI/button/FilterButton.tsx":"11","/Users/mspolermo/git/sultan-web-app/src/components/UI/input/MyInput.tsx":"12","/Users/mspolermo/git/sultan-web-app/src/components/CheckboxList.tsx":"13","/Users/mspolermo/git/sultan-web-app/src/components/UI/checkbox/MyCheckbox.tsx":"14","/Users/mspolermo/git/sultan-web-app/src/components/GoodsSorting.tsx":"15","/Users/mspolermo/git/sultan-web-app/src/components/CatalogBody.tsx":"16","/Users/mspolermo/git/sultan-web-app/src/components/Header.tsx":"17","/Users/mspolermo/git/sultan-web-app/src/components/BasketItem.tsx":"18","/Users/mspolermo/git/sultan-web-app/src/pages/AdminPage.tsx":"19","/Users/mspolermo/git/sultan-web-app/src/components/AddNewProduct.tsx":"20","/Users/mspolermo/git/sultan-web-app/src/components/UI/checkbox/CaretypeCheckbox.tsx":"21","/Users/mspolermo/git/sultan-web-app/src/components/AdminList.tsx":"22","/Users/mspolermo/git/sultan-web-app/src/components/AdminItem.tsx":"23","/Users/mspolermo/git/sultan-web-app/src/types/types.tsx":"24","/Users/mspolermo/git/sultan-web-app/src/components/Breadcrumbs.tsx":"25","/Users/mspolermo/git/sultan-web-app/src/pages/Main.tsx":"26","/Users/mspolermo/git/sultan-web-app/src/components/UI/Footer/Footer.tsx":"27"},{"size":206,"mtime":1679820346772,"results":"28","hashOfConfig":"29"},{"size":125,"mtime":1679906436108,"results":"30","hashOfConfig":"29"},{"size":206,"mtime":1679820346772,"results":"31","hashOfConfig":"32"},{"size":5421,"mtime":1680588050681,"results":"33","hashOfConfig":"32"},{"size":1078,"mtime":1680502291087,"results":"34","hashOfConfig":"32"},{"size":7242,"mtime":1680502600417,"results":"35","hashOfConfig":"32"},{"size":920,"mtime":1680505208078,"results":"36","hashOfConfig":"32"},{"size":1378,"mtime":1680505173811,"results":"37","hashOfConfig":"32"},{"size":2842,"mtime":1680505264122,"results":"38","hashOfConfig":"32"},{"size":799,"mtime":1680629722599,"results":"39","hashOfConfig":"32"},{"size":786,"mtime":1680630741145,"results":"40","hashOfConfig":"32"},{"size":430,"mtime":1680631879481,"results":"41","hashOfConfig":"32"},{"size":1716,"mtime":1680107004251,"results":"42","hashOfConfig":"32"},{"size":1302,"mtime":1680106693295,"results":"43","hashOfConfig":"32"},{"size":2583,"mtime":1680109486119,"results":"44","hashOfConfig":"32"},{"size":13687,"mtime":1680633637338,"results":"45","hashOfConfig":"32"},{"size":23071,"mtime":1680625209779,"results":"46","hashOfConfig":"32"},{"size":4243,"mtime":1680461419594,"results":"47","hashOfConfig":"32"},{"size":4048,"mtime":1680505155042,"results":"48","hashOfConfig":"32"},{"size":5398,"mtime":1680454700549,"results":"49","hashOfConfig":"32"},{"size":742,"mtime":1680346792217,"results":"50","hashOfConfig":"32"},{"size":1111,"mtime":1680446341302,"results":"51","hashOfConfig":"32"},{"size":7750,"mtime":1680446776689,"results":"52","hashOfConfig":"32"},{"size":548,"mtime":1680374427378,"results":"53","hashOfConfig":"32"},{"size":1791,"mtime":1680628176765,"results":"54","hashOfConfig":"32"},{"size":328,"mtime":1680499940660,"results":"55","hashOfConfig":"32"},{"size":26945,"mtime":1680616259876,"results":"56","hashOfConfig":"32"},{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"dez3dd",{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","suppressedMessages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},"1ov97ok",{"filePath":"67","messages":"68","suppressedMessages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70"},{"filePath":"71","messages":"72","suppressedMessages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74"},{"filePath":"75","messages":"76","suppressedMessages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78"},{"filePath":"79","messages":"80","suppressedMessages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82"},{"filePath":"83","messages":"84","suppressedMessages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86"},{"filePath":"87","messages":"88","suppressedMessages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90"},{"filePath":"91","messages":"92","suppressedMessages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94"},{"filePath":"95","messages":"96","suppressedMessages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98"},{"filePath":"99","messages":"100","suppressedMessages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"102","messages":"103","suppressedMessages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105"},{"filePath":"106","messages":"107","suppressedMessages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109"},{"filePath":"110","messages":"111","suppressedMessages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"113","messages":"114","suppressedMessages":"115","errorCount":0,"fatalErrorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116"},{"filePath":"117","messages":"118","suppressedMessages":"119","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120"},{"filePath":"121","messages":"122","suppressedMessages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124"},{"filePath":"125","messages":"126","suppressedMessages":"127","errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128"},{"filePath":"129","messages":"130","suppressedMessages":"131","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132"},{"filePath":"133","messages":"134","suppressedMessages":"135","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136"},{"filePath":"137","messages":"138","suppressedMessages":"139","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140"},{"filePath":"141","messages":"142","suppressedMessages":"143","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144"},{"filePath":"145","messages":"146","suppressedMessages":"147","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"148","messages":"149","suppressedMessages":"150","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151"},{"filePath":"152","messages":"153","suppressedMessages":"154","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"155","messages":"156","suppressedMessages":"157","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158"},"/Users/mspolermo/git/sultan-web-app.github.io/src/index.tsx",[],[],"/Users/mspolermo/git/sultan-web-app.github.io/src/App.tsx",[],[],"/Users/mspolermo/git/sultan-web-app/src/index.tsx",[],[],[],"/Users/mspolermo/git/sultan-web-app/src/App.tsx",["159","160","161","162","163","164","165","166","167","168"],[],"import React, { useEffect, useMemo, useState } from 'react';\n//import goods from './goods/goods.json'\nimport goodsJSON from './goods/goodsJSON.json'\nimport './App.css'\n\nimport Catalog from './pages/Catalog';\nimport ProductCard from './pages/ProductCard';\nimport Basket from './pages/Basket';\nimport { BrowserRouter, Route, Routes } from 'react-router-dom';\nimport { NavLink } from 'react-router-dom';\nimport Header from './components/Header';\nimport { IGoods } from './types/types';\nimport AdminPage from './pages/AdminPage';\nimport Breadcrumbs from './components/Breadcrumbs';\nimport Main from './pages/Main';\nimport Footer from './components/UI/Footer/Footer';\n\ninterface goods {\n  goods: IGoods[];\n}\n\n\nfunction App() {\n  const [goods, setGoods] = useState<IGoods []> (goodsJSON)\n\n  const [productType, setProductType] = useState<undefined | string>('');\n  const [orderList, setOrderList] = useState<any>([])\n\n  useEffect(() => {\n    \n    if ((productType!== undefined) && (productType!=='') ) {\n\n      // console.log(goods[+productType - 1]])\n      // Меняем на это\n      // console.log(goods.find ((good) => good.id == +productType))\n      let currentObject: IGoods | undefined = goods.find ((good) => good.id == +productType)\n    //Добавляем товар из списка\n      if (!orderList.includes(currentObject)) {\n        setOrderList([...orderList, currentObject]);\n        setSumOfMoneyArray([...sumOfMoneyArray, [currentObject?.id, 1]])\n      } else {\n    //Если он уже добавлен 1 раз в корзину\n        \n        let array = sumOfMoneyArray;\n        let foundIndex: number = -1;\n        let foundProductId = currentObject?.id;\n        let foundProductValue;\n  \n        for( let i=0; i<array.length; i++) {\n          if ((array[i])[0] == currentObject?.id) {\n            foundIndex = i;\n            foundProductValue = (array[i])[1]\n          }\n        }\n        array.splice(foundIndex, 1)\n        setSumOfMoneyArray([...array, [foundProductId, foundProductValue + 1] ])\n      }\n      setProductType(undefined)\n    }\n  }, [productType]);  \n\n  const [orderThing, setOrderThing] = useState<undefined | Array<number>>();\n  const [sumOfMoneyArray, setSumOfMoneyArray] = useState <any>([])\n  useEffect(() => { \n    //Подсчет суммы товаров в корзине (при измения количества товаров)  \n    if (orderThing!==undefined) {\n      let array = sumOfMoneyArray;\n      let findIndex: number = -1;\n\n      for( let i=0; i<array.length; i++) {\n        if ((array[i])[0] == orderThing[0]) {\n          findIndex = i;\n        }\n      }\n      array.splice(findIndex, 1)\n      setSumOfMoneyArray([...array, orderThing])\n    }\n  }, [orderThing])\n  const finalPrice = useMemo (() => {\n    let result = 0;\n      for (let i=0; i<sumOfMoneyArray.length; i++) {\n      \n        //изменил\n        //goods[(sumOfMoneyArray[i][0]) - 1]\n        // на\n    // console.log(goods.find ((good) => good.id == sumOfMoneyArray[i][0])))\n\n        let objectForSum:IGoods | undefined = goods.find ((good) => good.id == sumOfMoneyArray[i][0])\n        result+= (objectForSum!.price * (sumOfMoneyArray[i])[1])\n      }\n    return result  \n  }, [sumOfMoneyArray])\n\n  const [removeThing, setRemoveThing] = useState<undefined | IGoods>();\n  useMemo(() => {\n\n    let index = orderList.findIndex ( (order:any) => order.id === removeThing?.id)\n\n    if (index!== -1) {\n      orderList.splice(index, 1);\n      \n      setOrderList(orderList)\n    }\n    if (orderList.length !== sumOfMoneyArray.length) {\n      let array = sumOfMoneyArray;\n      let findIndex: number = -1;\n\n      for( let i=0; i<array.length; i++) {\n        if ((array[i])[0] == removeThing?.id) {\n          findIndex = i;\n        }\n      }\n      array.splice(findIndex, 1)\n      setSumOfMoneyArray([...array])\n    }\n  }, [removeThing])\n\n  function offer () {\n    setOrderList([])\n    setSumOfMoneyArray([])\n  }\n\n  return (\n    <BrowserRouter>\n      <div>\n        <NavLink to=\"/catalog/\">Каталог товаров</NavLink>\n        <NavLink to=\"/basket\">Корзина</NavLink>\n        <NavLink to=\"/admin\">Админка</NavLink>\n        <Header \n            finalPrice={finalPrice}\n            productTypeValue={productType}\n            onProductTypeChange={setProductType}        \n        />\n        <Breadcrumbs goods={goods} />\n      </div>\n      <div>\n        <Routes>\n          <Route path='/' element={<Main/>}></Route>\n          <Route path='/catalog/' element={<Catalog\n            goods={goods} \n            productTypeValue={productType}\n            onProductTypeChange={setProductType}          \n          />}></Route>\n          <Route path='/catalog/:id' element={<ProductCard\n            goods={goods} \n            productTypeValue={productType}\n            onProductTypeChange={setProductType}\n          />}></Route>\n          <Route path='/basket/' element={<Basket\n            orderList={orderList}\n            onOrderThingChange={setOrderThing}\n            onRemove={setRemoveThing}\n            finalPrice={finalPrice}\n            basketThingsArray={sumOfMoneyArray}\n            onOffer={offer} \n          />}></Route>\n          <Route path='/admin/' element={<AdminPage \n            onGoodsUpdate ={setGoods}\n            JSONfile = {goodsJSON}\n          />}></Route>\n        </Routes>\n      </div>\n      <Footer />\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","/Users/mspolermo/git/sultan-web-app/src/components/GoodsList.tsx",["169","170"],[],"import React, {FC, useEffect, useMemo, useState} from \"react\";\nimport { IGoods } from \"../types/types\";\nimport GoodsItem from \"./GoodsItem\";\nimport '../App.css'\n\ninterface GoodsListProps {\n    goods: IGoods[];\n    productTypeValue?: string;\n    onProductTypeChange?: (newType: string) => void;\n};\n\n\nconst GoodsList: FC<GoodsListProps> = ({goods, productTypeValue, onProductTypeChange}) => {\n        //BasketLogic\n    const [productType, setProductType] = useState<undefined | string>('');\n    \n    useEffect(() => {\n        if (productType !==undefined) {\n            onProductTypeChange?.(productType.toString())\n            setProductType(undefined)\n        }\n      }, [productType]);\n\n\n    return (\n        <div className=\"goods-list__list\">\n            {goods.map( good => \n              <GoodsItem \n                key={good.id} \n                good={good}\n                goods={goods}\n                productTypeValue={productType}\n                onProductTypeChange={setProductType}\n                />\n            )}\n        </div>\n    );\n};\n\nexport default GoodsList;","/Users/mspolermo/git/sultan-web-app/src/components/GoodsItem.tsx",["171","172","173"],[],"import React, {FC, useState} from \"react\";\nimport { IGoods } from \"../types/types\";\nimport '../App.css'\nimport { useNavigate } from \"react-router-dom\";\n\n\ninterface GoodsItemProps {\n    good: IGoods;\n    productTypeValue?: string;\n    onProductTypeChange?: (newType: string) => void;\n    goods?: IGoods[];\n};\n\nconst GoodsItem: FC<GoodsItemProps> = ({good, goods, productTypeValue, onProductTypeChange}) => {\n    const navigate = useNavigate();\n\n    function addOrder(e:any, good:IGoods) {\n        e.stopPropagation();\n        onProductTypeChange?.((good.id).toString())\n        console.log(good.id)\n    }\n\n    console.log(good.id - 1)\n    let index = goods?.findIndex ((find) => find.id == good.id)\n    console.log(index)\n\n    return (\n        <div \n        onClick={() => navigate('/catalog/' + (index))}\n        className=\"goods-list__item\">\n            <div className=\"goods-list__img-block\">\n                <img className=\"goods-list__img\" src={good.image} alt=\"Img\" />\n            </div>\n            {good.sizeType == 'weight' ? (\n                <div className=\"goods-list__size\">\n                    <svg width=\"20\" height=\"15\" viewBox=\"0 0 20 15\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M13.3035 7.99994C12.7753 7.99994 12.2785 7.71869 12.0097 7.26869L10.0003 3.93743L7.9941 7.26869C7.72222 7.72181 7.22535 8.00306 6.69722 8.00306C6.5566 8.00306 6.41597 7.98431 6.2816 7.94369L2.00035 6.71868V12.2812C2.00035 12.7406 2.31285 13.1406 2.7566 13.2499L9.51285 14.9406C9.8316 15.0187 10.166 15.0187 10.4816 14.9406L17.2441 13.2499C17.6878 13.1374 18.0003 12.7374 18.0003 12.2812V6.71868L13.7191 7.94056C13.5847 7.98119 13.4441 7.99994 13.3035 7.99994ZM19.9472 4.49369L18.3378 1.28118C18.241 1.08743 18.0316 0.974934 17.816 1.00306L10.0003 1.99993L12.866 6.75306C12.9847 6.94993 13.2222 7.04368 13.4441 6.98118L19.6285 5.21556C19.9378 5.12493 20.0878 4.78118 19.9472 4.49369ZM1.66285 1.28118L0.0534711 4.49369C-0.0902789 4.78118 0.0628461 5.12493 0.369096 5.21243L6.55347 6.97806C6.77535 7.04056 7.01285 6.94681 7.1316 6.74993L10.0003 1.99993L2.1816 1.00306C1.96597 0.978059 1.75972 1.08743 1.66285 1.28118Z\" fill=\"#3F4E65\"/></svg>\n                    <p className=\"goods-list__size-description\">{good.size} г</p>\n                </div>\n                ) : (\n                    <div className=\"goods-list__size\">\n                        <svg width=\"9\" height=\"15\" viewBox=\"0 0 9 15\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M8.1 14.0625C8.05312 14.3164 7.95234 14.5361 7.79766 14.7217C7.64297 14.9072 7.44375 15 7.2 15H1.8C1.55625 15 1.35938 14.9097 1.20938 14.729C1.05937 14.5483 0.95625 14.3262 0.9 14.0625L0 8.4375V6.5625C0 6.2793 0.0914062 6.04492 0.274219 5.85938C0.457031 5.67383 0.726562 5.49072 1.08281 5.31006C1.43906 5.12939 1.65937 5.00977 1.74375 4.95117C2.11875 4.67773 2.45625 4.35547 2.75625 3.98438C3.05625 3.61328 3.27656 3.22266 3.41719 2.8125H3.15C3.02812 2.8125 2.92266 2.76611 2.83359 2.67334C2.74453 2.58057 2.7 2.4707 2.7 2.34375V0.46875C2.7 0.341797 2.74453 0.231934 2.83359 0.13916C2.92266 0.0463867 3.02812 0 3.15 0H5.85C5.97187 0 6.07734 0.0463867 6.16641 0.13916C6.25547 0.231934 6.3 0.341797 6.3 0.46875V2.34375C6.3 2.4707 6.25547 2.58057 6.16641 2.67334C6.07734 2.76611 5.97187 2.8125 5.85 2.8125H5.58281C5.86406 3.60352 6.38437 4.28711 7.14375 4.86328C7.24687 4.95117 7.48125 5.08789 7.84687 5.27344C8.2125 5.45898 8.49609 5.64941 8.69766 5.84473C8.89922 6.04004 9 6.2793 9 6.5625V8.4375L8.1 14.0625Z\" fill=\"#3F4E65\"/></svg>\n                        <p className=\"goods-list__size-description\">{good.size} мл</p>\n                    </div>\n                )}\n            <div className=\"goods-list__description\">\n                <span className=\"goods-list__title\">{good.title}</span> \n                <span className=\"goods-list__title-additional\">{good.desription}</span>\n            </div>\n            <div className=\"goods-list__info\">\n                <span className=\"goods-list__field-name\">Штрихкод: </span>\n                <span className=\"goods-list__field-value\">{good.barcode}</span>\n            </div>\n            <div className=\"goods-list__info\">\n                <span className=\"goods-list__field-name\">Производитель: </span>\n                <span className=\"goods-list__field-value\">{good.producer}</span>\n            </div>\n            <div className=\"goods-list__info\">\n                <span className=\"goods-list__field-name\">Бренд: </span>\n                <span className=\"goods-list__field-value\">{good.brand}</span>\n                </div>\n            <div className=\"goods-list__bottom-item\">\n                <p className=\"goods-list__price\">{good.price} ₸</p>\n                <button onClick={(e) => addOrder(e, good)} className=\"goods-list__btn\">\n                    В корзину\n                    <svg width=\"25\" height=\"18\" viewBox=\"0 0 25 18\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M24.448 4.09209C24.2955 3.87908 24.0909 3.77258 23.8341 3.77258H7.48756L7.0439 2.61757C6.93156 2.23889 6.77908 1.91543 6.58649 1.6472C6.39389 1.37897 6.18926 1.18963 5.97259 1.07918C5.75592 0.968728 5.56734 0.893781 5.40684 0.854335C5.24635 0.814889 5.08585 0.795166 4.92536 0.795166H1.62717C1.41852 0.795166 1.24198 0.866169 1.09753 1.00817C0.953083 1.15018 0.880859 1.33163 0.880859 1.55253C0.880859 1.67876 0.912959 1.80104 0.977157 1.91938C1.04136 2.03772 1.13364 2.12844 1.25401 2.19155C1.37438 2.25467 1.49877 2.28622 1.62717 2.28622H4.92536C4.98955 2.28622 5.04974 2.29411 5.10591 2.30989C5.16209 2.32567 5.23832 2.39273 5.33462 2.51107C5.43092 2.62941 5.51117 2.80691 5.57537 3.04359L9.02832 12.5248C9.06042 12.6195 9.11258 12.7102 9.1848 12.797C9.25703 12.8838 9.34129 12.9508 9.43758 12.9982C9.53388 13.0455 9.6382 13.0692 9.75055 13.0692H20.1507C20.3112 13.0692 20.4596 13.0218 20.5961 12.9272C20.7325 12.8325 20.8248 12.7142 20.8729 12.5722L24.5563 4.79029C24.6365 4.53783 24.6004 4.3051 24.448 4.09209ZM19.621 11.5545H10.3524L7.89682 5.2873H22.7266L19.621 11.5545ZM18.2328 13.8905C17.7031 13.8905 17.2497 14.0759 16.8726 14.4467C16.4954 14.8175 16.3068 15.2633 16.3068 15.784C16.3068 16.3047 16.4954 16.7504 16.8726 17.1212C17.2497 17.492 17.7031 17.6774 18.2328 17.6774C18.7624 17.6774 19.2158 17.492 19.593 17.1212C19.9701 16.7504 20.1587 16.3047 20.1587 15.784C20.1587 15.2633 19.9701 14.8175 19.593 14.4467C19.2158 14.0759 18.7624 13.8905 18.2328 13.8905ZM11.2993 13.8905C10.9462 13.8905 10.6212 13.9773 10.3243 14.1509C10.0274 14.3245 9.79469 14.5532 9.62617 14.8373C9.45765 15.1213 9.37339 15.4368 9.37339 15.784C9.37339 16.3047 9.56197 16.7504 9.93913 17.1212C10.3163 17.492 10.7697 17.6774 11.2993 17.6774C11.829 17.6774 12.2824 17.492 12.6595 17.1212C13.0367 16.7504 13.2253 16.3047 13.2253 15.784C13.2253 15.6577 13.2133 15.5315 13.1892 15.4053C13.1651 15.2791 13.129 15.1607 13.0808 15.0503C13.0327 14.9398 12.9725 14.8333 12.9003 14.7308C12.8281 14.6282 12.7478 14.5335 12.6595 14.4467C12.5713 14.36 12.475 14.2811 12.3706 14.2101C12.2663 14.1391 12.158 14.0799 12.0456 14.0326C11.9333 13.9852 11.8129 13.9497 11.6845 13.9261C11.5561 13.9024 11.4277 13.8905 11.2993 13.8905Z\" fill=\"white\"/></svg>\n                </button>\n            </div>\n      </div>\n    )\n}\n\nexport default GoodsItem;","/Users/mspolermo/git/sultan-web-app/src/pages/Catalog.tsx",["174","175"],[],"import React, {FC, useEffect, useMemo, useState} from \"react\";\nimport '../App.css'\nimport CatalogBody from \"../components/CatalogBody\";\nimport { IGoods } from \"../types/types\";\n\ninterface CatalogProps {\n    goods: IGoods[];\n    productTypeValue?: string;\n    onProductTypeChange?: (newType: string) => void;\n}\n\nconst Catalog: FC<CatalogProps> = ({goods, productTypeValue, onProductTypeChange}) => {\n\n    const [productType, setProductType] = useState<undefined | string>('');\n    useEffect(() => {\n        if (productType !==undefined) {\n            onProductTypeChange?.(productType.toString())\n            setProductType(undefined)\n        }\n      }, [productType]);\n\n    \n    return (\n        <div>\n            <CatalogBody\n                goods={goods} \n                productTypeValue={productType}\n                onProductTypeChange={setProductType}\n            />\n      </div>\n    );\n};\n\nexport default Catalog;","/Users/mspolermo/git/sultan-web-app/src/pages/ProductCard.tsx",["176"],[],"import React, {FC, useEffect, useState} from \"react\";\n//import goods from '../goods/goods.json'\nimport '../App.css'\nimport GoodsItem from \"../components/GoodsItem\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport { IGoods } from \"../types/types\";\n\n\ntype ProductCardParams = {\n    id: string;\n}\n\ninterface ProductCardProps {\n    goods: IGoods[];\n    productTypeValue?: string;\n    onProductTypeChange?: (newType: string) => void;\n}\n\nconst ProductCard: FC<ProductCardProps> = ({goods, productTypeValue, onProductTypeChange}) => {\n    const params = useParams<ProductCardParams>();\n    const navigate = useNavigate();\n  \n        //Basket\n    const [productType, setProductType] = useState<undefined | string>('');\n    useEffect(() => {\n        if (productType !==undefined) {\n            onProductTypeChange?.(productType.toString())\n            //console.log(productType)\n            //добавил setProductType(undefined)\n            setProductType(undefined)}\n      }, [productType]);\n\n\n    return (\n        <div>\n            <button onClick={() => {navigate('/')}}>Назад</button>\n            <GoodsItem \n                good={goods[Number(params.id)]}\n                goods={goods}\n                productTypeValue={productType}\n                onProductTypeChange={setProductType}\n            />\n        </div>\n    );\n};\n\nexport default ProductCard;","/Users/mspolermo/git/sultan-web-app/src/pages/Basket.tsx",["177","178","179","180","181"],[],"import React, {FC, useEffect, useMemo, useState} from \"react\";\nimport '../App.css'\nimport BasketItem from \"../components/BasketItem\";\nimport { IBasketGoods, IGoods } from \"../types/types\";\n\ninterface BasketProps{\n    orderList: IGoods[];\n    onOrderThingChange?: (OrderThing: Array<number>) => void;\n    onRemove? : (removeItem :IGoods) => void;\n    finalPrice: number;\n    basketThingsArray?:any;\n    onOffer: any;\n}\n\nconst Basket: FC<BasketProps> = ({orderList, onOrderThingChange, onRemove, finalPrice, basketThingsArray, onOffer}) => {\n\n    const [basketArray, setBasketArray] = useState<any>();\n    console.log(basketArray)\n\n    const basketChanger = useEffect( () => {\n        basketThingsArray.sort((a: Array<number>, b: Array<number>) => a[0] - b[0])\n        orderList.sort((a:IGoods, b:IGoods) => a.id - b.id )\n\n        let newArray = [];\n        \n        for( let i = 0; i <orderList.length; i++){\n            newArray.push({\n                id: orderList[i].id,\n                image: orderList[i].image,\n                title: orderList[i].title,\n                sizeType: orderList[i].sizeType,\n                size: orderList[i].size,\n                barcode: orderList[i].barcode,\n                producer: orderList[i].producer,\n                brand: orderList[i].brand,\n                desription: orderList[i].desription,\n                price: orderList[i].price,\n                careType: orderList[i].careType,\n                basketCount: (basketThingsArray[i])[1]\n            })\n        }\n        setBasketArray(newArray)\n    },[basketThingsArray])\n\n\n    const [total, setTotal] = useState<undefined | Array<number>>();\n    useEffect( () => {\n        if (total) {\n        onOrderThingChange?.(total)\n        } \n    }, [total])\n\n    const [removeThing, setRemoveThing] = useState<undefined | IGoods>();\n    useEffect( () => {\n        if (removeThing) {\n            onRemove?.(removeThing)\n            //console.log(removeThing)\n        }\n    }, [removeThing])\n\n    const offer = () => {\n        alert('Спасибо за заказ!')\n        setBasketArray([])\n        onOffer?.([])\n    }\n\n    return (\n        <div>\n            <div>КОРЗИНА</div>\n            <div className=\"goods-list__list\">\n                {basketArray?.map( (order:IBasketGoods) => \n                    <div key={order.id} >\n                        <BasketItem \n                            order={order}\n                            onTotalChange={setTotal} \n                            onRemove={setRemoveThing}\n                        />\n                    </div>    \n                )}\n            \n            </div>\n            <div>\n                <button onClick={offer}>Оформить заказ</button>\n                <p>Итого: {finalPrice} ₸</p>   \n            </div>\n        </div>\n    );\n};\n\nexport default Basket;","/Users/mspolermo/git/sultan-web-app/src/components/UI/select/MySelect.tsx",["182"],[],"import { type } from \"os\";\nimport React, {FC} from \"react\";\n\ninterface MySelectProps {\n    options: OptionsPropery[];\n    defaultValue: string;\n    value: string;\n    onChange: (sort: string) => void;\n    className?: string;\n}\n\ninterface OptionsPropery {\n    value: string;\n    name: string;\n}\n\nconst MySelect: FC<MySelectProps> = ({options, defaultValue, value, onChange, className}) => {\n    return (\n        <select className={className} value={value} onChange = {event => onChange(event.target.value)}>\n            <option disabled value=\"\">{defaultValue}</option>\n            {options.map( option =>\n                <option key={option.value}\n                value={option.value}>\n                    {option.name}\n                </option>)}\n        </select>\n    )\n}\n\nexport default MySelect;","/Users/mspolermo/git/sultan-web-app/src/components/UI/button/FilterButton.tsx",["183"],[],"import { type } from \"os\";\nimport React, {FC, useState} from \"react\";\n\ninterface FiletrButtonProps {\n    name: string;\n    value: any;\n    careType?: string;\n    onClick?: any;\n    className?: string;\n}\n\n\nconst FilterButton: FC<FiletrButtonProps> = ({name, value, onClick, careType, className}) => {\n    const [clickCount, setClickCount] = useState(0);\n\n    function clickHandler (event:any) {\n        onClick({careType})\n        setClickCount(clickCount + 1)\n\n        if (clickCount>0) {\n            setClickCount(0)\n            careType='requerType'\n            onClick({careType})\n        }\n    }\n\n\n    return (\n        <button className={className}\n            value={value} \n            onClick={clickHandler}\n        >{name}\n        </button>\n    )\n}\n\nexport default FilterButton;","/Users/mspolermo/git/sultan-web-app/src/components/UI/input/MyInput.tsx",[],[],"/Users/mspolermo/git/sultan-web-app/src/components/CheckboxList.tsx",["184","185"],[],"import React, {FC, useMemo, useState} from \"react\";\nimport { IGoods } from \"../types/types\";\nimport MyCheckbox from \"./UI/checkbox/MyCheckbox\";\n\ninterface CheckboxListProps {\n    value: any;\n    filtredGoodsList: IGoods[];\n    onClick?: any;\n}\n\nlet boxesArray:any = []\n\nconst CheckboxList:FC<CheckboxListProps> = ({value, filtredGoodsList, onClick}) => {\n\n    let producersArray:any[] = filtredGoodsList.map( good => good.producer);\n    producersArray = producersArray.reduce((acc, i) => {\n        if (acc.hasOwnProperty(i)) {\n          acc[i] += 1;\n        } else {\n          acc[i as keyof typeof acc] = 1;\n        }\n        return acc;\n    }, []);\n    let recycledproducersArray = [];\n    for (var key in producersArray) {\n        recycledproducersArray.push([key, producersArray[key]]);\n    };\n\n    let checkboxClassnameCount = 1;\n    const [buttonChecker, setButtonChecker] = useState(false)\n    const [buttonName, setButtonName] = useState('Показать все')\n    function clickHandler() {\n        setButtonChecker(!buttonChecker)\n        if (!buttonChecker) {\n            setButtonName('Скрыть')\n        } else {\n            setButtonName('Показать все')\n        }\n    }\n\n    return (\n        <div>\n            {recycledproducersArray.map((producer) =>          \n                <MyCheckbox \n                    key={producer[0]} \n                    producer={producer}\n                    onClick = {onClick}\n                    buttonChecker={buttonChecker}\n                    checkboxClassnameCount = {checkboxClassnameCount++}\n                />)\n            }\n            <button onClick={clickHandler}>{buttonName}</button>\n        </div>\n    );\n};\n\nexport default CheckboxList","/Users/mspolermo/git/sultan-web-app/src/components/UI/checkbox/MyCheckbox.tsx",["186","187"],[],"import React, {FC, useState} from \"react\";\nimport { IGoods } from \"../../../types/types\";\n\ninterface MyCheckboxProps {\n    key: string;\n    producer: any;\n    onClick?: any;\n    checkboxClassnameCount: number;\n    buttonChecker: boolean;\n};\n\nconst MyCheckbox:FC<MyCheckboxProps> = ({producer, onClick, checkboxClassnameCount, buttonChecker}) => {\n    let checkboxClassName: string;\n\n    if (checkboxClassnameCount > 4) {\n        checkboxClassName = 'checkbox_hidden'\n    } else {\n        checkboxClassName = 'checkbox'\n    }\n    if (buttonChecker) {\n        checkboxClassName = 'checkbox'\n    }\n\n    \n    let producerName = producer[0];\n    const [checked, setChecked] = useState(true);\n\n    function clickHandler () {\n        if (checked==true) {\n           onClick(['add', producerName]) \n           setChecked(!checked)\n        } else {\n            onClick(['remove', producerName]) \n            setChecked(!checked)\n        }\n    };\n\n    return (\n        <div className={checkboxClassName}>\n            <input \n                type=\"checkbox\" \n                name={producerName}\n                onClick={ (event) => clickHandler()}\n                \n            />\n            <label htmlFor={producerName}>{producerName} ({producer[1]})</label>\n        </div>\n    );\n};\n\nexport default MyCheckbox;","/Users/mspolermo/git/sultan-web-app/src/components/GoodsSorting.tsx",["188","189","190","191","192"],[],"/Users/mspolermo/git/sultan-web-app/src/components/CatalogBody.tsx",["193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211"],[],"import React, {FC, useEffect, useMemo, useState} from \"react\";\nimport GoodsList from './GoodsList';\nimport '../App.css'\nimport MySelect from \"./UI/select/MySelect\";\nimport FilterButton from \"./UI/button/FilterButton\";\nimport { IGoods } from \"../types/types\";\nimport MyInput from \"./UI/input/MyInput\";\nimport CheckboxList from \"./CheckboxList\";\n\ninterface CatalogBodyProps {\n    goods: IGoods[];\n    productTypeValue?: string;\n    onProductTypeChange?: (newType: string) => void;\n};\n\nconst CatalogBody: FC<CatalogBodyProps> = ({goods, productTypeValue, onProductTypeChange}) => {\n    const [products, setProducts] = useState(goods)\n\n    //BasketLogic\n    const [productType, setProductType] = useState<undefined | string>('');\n    useEffect(() => {\n        if (productType !==undefined) {\n            onProductTypeChange?.(productType.toString())\n            setProductType(undefined)\n        }\n      }, [productType]);\n\n        //Sorting logic\n        \n    const [selectedSort, setSelectedSort] = useState('')\n    const sortGoods = (sort:string) => {\n        setSelectedSort(sort);\n        setPageNumber(1);\n    }\n    const sortedGoods:any = useMemo( () => {\n        if (!selectedSort) {\n            return products\n        } \n        let typeOfSort = (selectedSort.split('-'))\n        if ((typeOfSort[0] == 'title') && (typeOfSort.length == 1)) {\n            return ([...products].sort((a, b) => a[typeOfSort[0] as keyof typeof a].toString().localeCompare(b[typeOfSort[0] as keyof typeof b].toString())));\n        } else if ((typeOfSort[0] == 'title') && (typeOfSort.length == 2)) {\n            return  ([...products].sort((a, b) => a[typeOfSort[0] as keyof typeof a].toString().localeCompare(b[typeOfSort[0] as keyof typeof b].toString())).reverse())\n        } else if ((typeOfSort[0] == 'price') && (typeOfSort.length == 1)) {\n            return [...products].sort((a, b) => +a[typeOfSort[0] as keyof typeof a] - +b[typeOfSort[0] as keyof typeof b])\n        } else if ((typeOfSort[0] == 'price') && (typeOfSort.length == 2)) {\n            return [...products].sort((a, b) =>  +b[typeOfSort[0] as keyof typeof b] - +a[typeOfSort[0] as keyof typeof a])\n        }\n    }, [selectedSort, products])\n\n    const [selectedFilter, setSelectedFilter] = useState()\n    const filerGoods = (filter: any) => {\n        setSelectedFilter(filter);\n        setPageNumber(1);\n    }\n    const sortedAndFiltredGoods:any = useMemo( () => {\n        if(!selectedFilter) {\n            return sortedGoods\n        }\n        let typeOfFilter: {careType: string} = selectedFilter;\n        let typeOfFilterValue = typeOfFilter.careType\n        return sortedGoods.filter( (product:IGoods) => product.careType.includes(typeOfFilterValue)\n        )\n    }, [selectedFilter, sortedGoods])\n\n    const [searchProdicerQuery, setSearchProdicerQuery] = useState('')\n    const queryGoods = (sort:string) => {\n        setSearchProdicerQuery(sort);\n        setPageNumber(1);\n    }\n    const sortedFiltreadSearchedGoods = useMemo(() => {\n        return sortedAndFiltredGoods.filter( (product:IGoods) => product.producer.toLowerCase().includes(searchProdicerQuery.toLowerCase())) \n    }, [searchProdicerQuery, sortedAndFiltredGoods])\n    \n    const [minPrice, setMinPrice] = useState('')\n    const minPricing = (sort:string) => {\n        setMinPrice(sort);\n        setPageNumber(1);\n    }\n    const sortedFiltreadSearchedMinGoods = useMemo(() => {\n        return sortedFiltreadSearchedGoods.filter( (product:IGoods) => product.price > +minPrice) \n    }, [minPrice, sortedFiltreadSearchedGoods])\n\n    const [maxPrice, setMaxPrice] = useState('')\n    const maxPricing = (sort:string) => {\n        setMaxPrice(sort);\n        setPageNumber(1);\n    }\n    const sortedFiltreadSearchedPriceGoods = useMemo(() => {\n        if (maxPrice !== '') {\n            return sortedFiltreadSearchedMinGoods.filter( (product:IGoods) => product.price < +maxPrice)\n        }\n        return sortedFiltreadSearchedMinGoods\n    }, [maxPrice, sortedFiltreadSearchedMinGoods])\n\n    const [checkbox, setCheckbox] = useState()\n    const checkboxing = (sort:any) => {\n        setCheckbox(sort);\n        setPageNumber(1);\n    }\n    const [checkboxArray, setCheckboxArray] = useState([]);  \n    const checkboxArraySost = useMemo( () => {\n        if (!checkbox) return\n        if (checkbox[0] == 'add') {\n            setCheckboxArray ([...checkboxArray, checkbox[1]])\n        }else if (checkbox[0] == 'remove'){\n            setCheckboxArray(checkboxArray.filter( (producer: string) => producer !== checkbox[1]))\n        } \n    }, [checkbox])\n    const finalFiltredGoods:any = useMemo( () => {\n        if(!checkbox) {\n            return sortedFiltreadSearchedPriceGoods\n        }\n        let goodsByCheckboxArray:any = [];\n        for (let i=0; i<checkboxArray.length; i++) {\n            let pushItem = sortedFiltreadSearchedPriceGoods.filter( (product:IGoods) => product.producer.includes(checkboxArray[i]))\n            pushItem.map( (product:any) => goodsByCheckboxArray.push(product))\n        }\n        if (goodsByCheckboxArray[0] == undefined) {\n            goodsByCheckboxArray = sortedFiltreadSearchedPriceGoods\n        }\n        return goodsByCheckboxArray\n\n    }, [checkboxArray, sortedFiltreadSearchedPriceGoods])\n\n        //Pagination\n\n    const [pageNumber, setPageNumber] = useState (1)\n    const pagesArray = useMemo( () => {\n        let totalPages = Math.ceil(finalFiltredGoods.length/ 10)\n\n        let pagesArray = []\n        for (let i = 0; i< totalPages; i++) {\n            pagesArray.push(i+1)\n        } \n        return pagesArray\n    }, [finalFiltredGoods])\n    const pagingPage = useMemo( () => {\n        let choosenPage =  pagesArray.indexOf(pageNumber, 0);\n        if (choosenPage + 1 == pagesArray.length) {\n            return finalFiltredGoods.slice((choosenPage*10), finalFiltredGoods.length)\n        } else {\n            return finalFiltredGoods.slice((choosenPage*10), (choosenPage*10 + 10))\n        }\n    }, [pageNumber, finalFiltredGoods])\n\n    return (\n        <div>\n\n        \n        <div className=\"catalog-head\">\n            <div className=\"container catalog-head__container\"> \n                <h2 className=\"catalog-head__heading\">КОСМЕТИКА И ГИГИЕНА</h2>\n                <div className=\"catalog-head__block\">\n                    <span className=\"catalog-head__text\">Сортировка: </span>\n                    <MySelect\n                        className=\"catalog-head__select\" \n                        value={selectedSort}\n                        onChange={sortGoods}\n                        defaultValue='Название'\n                        options={[\n                            {value: 'price', name: 'Цена: По возрастанию'},\n                            {value: 'price-down', name: 'Цена: По убыванию'},\n                            {value: 'title', name: 'Название: По возрастанию'},\n                            {value: 'title-down', name: 'Название: По убыванию'}\n                        ]}\n                    />\n                </div> \n            </div>\n        </div>\n        <div className=\"nav-top\">    \n            <div className=\"container nav-top__container\"> \n                <FilterButton className='nav-top__btn' value={selectedFilter} careType = 'body'name = 'Уход за&nbsp;телом'onClick={filerGoods} />\n                <FilterButton className='nav-top__btn' value={selectedFilter} careType = 'hands' name = 'Уход за&nbsp;руками' onClick={filerGoods} />\n                <FilterButton className='nav-top__btn' value={selectedFilter} careType = 'legs' name = 'Уход за&nbsp;ногами' onClick={filerGoods} />\n                <FilterButton className='nav-top__btn' value={selectedFilter} careType = 'face' name = 'Уход за&nbsp;лицом' onClick={filerGoods} />\n                <FilterButton className='nav-top__btn' value={selectedFilter} careType = 'hair' name = 'Уход за&nbsp;волосами' onClick={filerGoods} />\n                <FilterButton className='nav-top__btn' value={selectedFilter} careType = 'sun' name = 'Средства для&nbsp;загара' onClick={filerGoods} />\n                <FilterButton className='nav-top__btn' value={selectedFilter} careType = 'shaving' name = 'Средства для&nbsp;бритья' onClick={filerGoods} />\n                <FilterButton className='nav-top__btn' value={selectedFilter} careType = 'present' name = 'Подарочные наборы' onClick={filerGoods} />\n                <FilterButton className='nav-top__btn' value={selectedFilter} careType = 'hygienic' name = 'Гигиеническая продукция' onClick={filerGoods} />\n                <FilterButton className='nav-top__btn' value={selectedFilter} careType = 'mouth' name = 'Гигиена полости рта' onClick={filerGoods} />\n                <FilterButton className='nav-top__btn' value={selectedFilter} careType = 'paper' name = 'Бумажная продукция' onClick={filerGoods} />\n            </div>\n        </div>\n        <div className=\"catalog-body\">\n            <div className=\"container catalog-body__container\">\n                <div className=\"catalog-body__left\"> \n                    <h4 className=\"catalog-body__heading\">Подбор по параметрам</h4>\n                    <p className=\"catalog-body__price\">Цена ₸</p>\n                    <div className=\"catalog-body__pricing\">\n                    <MyInput\n                        className=\"catalog-body__input-price\" \n                        value={minPrice}\n                        onChange={minPricing}\n                        placeholder = \"0\"\n                    />\n                    <p className=\"catalog-body__slicer\">-</p>\n                        <MyInput\n                        className=\"catalog-body__input-price\"  \n                        value={maxPrice}\n                        onChange={maxPricing}\n                        placeholder = \"10 000\"\n                    />\n                    </div>\n                    <h5 className=\"catalog-body__second-heading\">Производитель</h5>\n                    <div className=\"catalog-body__search-querry\">\n                        <MyInput \n                            className=\"catalog-body__input-search\"  \n                            value={searchProdicerQuery}\n                            onChange={queryGoods}\n                            placeholder = \"Поиск\"\n                        />\n                        <div className=\"catalog-body__img\">\n                            <svg width=\"19\" height=\"19\" viewBox=\"0 0 19 19\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M16.5294 16.5294L13.0989 13.0928L16.5294 16.5294ZM15 8.5C15 10.2239 14.3152 11.8772 13.0962 13.0962C11.8772 14.3152 10.2239 15 8.5 15C6.77609 15 5.12279 14.3152 3.90381 13.0962C2.68482 11.8772 2 10.2239 2 8.5C2 6.77609 2.68482 5.12279 3.90381 3.90381C5.12279 2.68482 6.77609 2 8.5 2C10.2239 2 11.8772 2.68482 13.0962 3.90381C14.3152 5.12279 15 6.77609 15 8.5V8.5Z\" stroke=\"white\" stroke-width=\"1.3\" stroke-linecap=\"round\"/></svg>\n                        </div>\n                    </div> \n                    <CheckboxList \n                        value={checkbox}\n                        onClick={checkboxing}\n                        filtredGoodsList={sortedFiltreadSearchedPriceGoods} \n                    />\n                    <div style={{display: 'flex', flexDirection: 'column', marginTop: '20px'}}> \n                        <FilterButton value={selectedFilter} careType = 'body'name = 'Уход за телом'onClick={filerGoods} />\n                        <FilterButton value={selectedFilter} careType = 'hands' name = 'Уход за руками' onClick={filerGoods} />\n                        <FilterButton value={selectedFilter} careType = 'legs' name = 'Уход за ногами' onClick={filerGoods} />\n                        <FilterButton value={selectedFilter} careType = 'face' name = 'Уход за лицом' onClick={filerGoods} />\n                        <FilterButton value={selectedFilter} careType = 'hair' name = 'Уход за волосами' onClick={filerGoods} />\n                        <FilterButton value={selectedFilter} careType = 'sun' name = 'Средства для загара' onClick={filerGoods} />\n                        <FilterButton value={selectedFilter} careType = 'shaving' name = 'Средства для бритья' onClick={filerGoods} />\n                        <FilterButton value={selectedFilter} careType = 'present' name = 'Подарочные наборы' onClick={filerGoods} />\n                        <FilterButton value={selectedFilter} careType = 'hygienic' name = 'Гигиеническая продукция' onClick={filerGoods} />\n                        <FilterButton value={selectedFilter} careType = 'mouth' name = 'Гигиена полости рта' onClick={filerGoods} />\n                        <FilterButton value={selectedFilter} careType = 'paper' name = 'Бумажная продукция' onClick={filerGoods} />\n                    </div>   \n                </div>\n                <GoodsList \n                    goods={pagingPage} \n                    productTypeValue={productType}\n                    onProductTypeChange={setProductType}\n                />\n            </div>\n        </div>\n            <div >\n                {pagesArray.map( p =>\n                    <span \n                        key={p}\n                        onClick={() => setPageNumber(p)}\n                    >{p}</span>)}\n            </div>\n      </div>\n    );\n};\n\nexport default CatalogBody;","/Users/mspolermo/git/sultan-web-app/src/components/Header.tsx",["212","213","214","215","216","217","218"],[],"import React, {FC, useMemo, useState} from \"react\";\nimport { Link } from \"react-router-dom\";\nimport '../App.css'\n\n\ninterface HeaderProps {\n    finalPrice:number;\n    productTypeValue?: string;\n    onProductTypeChange?: (newType: string) => void;\n};\n\n\n\nconst Header: FC<HeaderProps> = ({finalPrice, productTypeValue, onProductTypeChange}) => {\n\n\n    return (\n        <div>\n            <section className=\"header-top\">\n                <div className=\"container header-top__container\">\n                <div className=\"header-top__left\">\n                <div className=\"header-top__block\">\n                    <svg className=\"header-top__img\" width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M10 10.8335C11.3807 10.8335 12.5 9.71421 12.5 8.3335C12.5 6.95278 11.3807 5.8335 10 5.8335C8.61929 5.8335 7.5 6.95278 7.5 8.3335C7.5 9.71421 8.61929 10.8335 10 10.8335Z\" stroke=\"#3F4E65\" strokeWidth=\"1.3\" strokeLinecap=\"round\" strokeLinejoin=\"round\"/><path d=\"M9.99967 1.66675C8.23156 1.66675 6.53587 2.36913 5.28563 3.61937C4.03539 4.86961 3.33301 6.5653 3.33301 8.33342C3.33301 9.91008 3.66801 10.9417 4.58301 12.0834L9.99967 18.3334L15.4163 12.0834C16.3313 10.9417 16.6663 9.91008 16.6663 8.33342C16.6663 6.5653 15.964 4.86961 14.7137 3.61937C13.4635 2.36913 11.7678 1.66675 9.99967 1.66675V1.66675Z\" stroke=\"#3F4E65\" strokeWidth=\"1.3\" strokeLinecap=\"round\" strokeLinejoin=\"round\"/></svg>\n                    <div className=\"header-top__body\">\n                        <p className=\"header-top__address\">г. Кокчетав, ул. Ж. Ташенова 129Б </p>\n                        <p className=\"header-top__additional\">(Рынок Восточный)</p>\n                    </div>\n                </div>\n                <div className=\"header-top__block\">\n                    <svg className=\"header-top__img\" width=\"18\" height=\"14\" viewBox=\"0 0 18 14\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M3.37533 0.333252H14.6253C15.3171 0.333207 15.9827 0.59788 16.4855 1.07298C16.9884 1.54808 17.2903 2.19758 17.3295 2.88825L17.3337 3.04158V10.9583C17.3337 11.65 17.069 12.3156 16.5939 12.8184C16.1188 13.3213 15.4693 13.6233 14.7787 13.6624L14.6253 13.6666H3.37533C2.68354 13.6666 2.01797 13.402 1.51513 12.9269C1.0123 12.4518 0.710324 11.8023 0.671159 11.1116L0.666992 10.9583V3.04158C0.666947 2.3498 0.931621 1.68423 1.40672 1.18139C1.88182 0.678558 2.53132 0.376584 3.22199 0.337419L3.37533 0.333252H14.6253H3.37533ZM16.0837 4.81075L9.29199 8.38575C9.21531 8.42626 9.13102 8.45037 9.04451 8.45654C8.958 8.46271 8.87115 8.4508 8.78949 8.42159L8.70949 8.38658L1.91699 4.81158V10.9583C1.91701 11.3242 2.05463 11.6768 2.30256 11.9461C2.55048 12.2153 2.89058 12.3815 3.25533 12.4116L3.37533 12.4166H14.6253C14.9915 12.4166 15.3442 12.2788 15.6134 12.0307C15.8827 11.7826 16.0487 11.4423 16.0787 11.0774L16.0837 10.9583V4.81075ZM14.6253 1.58325H3.37533C3.00933 1.58327 2.65673 1.72089 2.3875 1.96882C2.11827 2.21674 1.95211 2.55683 1.92199 2.92159L1.91699 3.04158V3.39908L9.00033 7.12659L16.0837 3.39825V3.04158C16.0836 2.67546 15.9459 2.32274 15.6978 2.0535C15.4497 1.78425 15.1094 1.61817 14.7445 1.58825L14.6253 1.58325Z\" fill=\"#3F4E65\"/></svg>\n                    <div className=\"header-top__body\">\n                    <a href=\"mailto:opt.sultan@mail.ru\" className=\"header-top__mail\">opt.sultan@mail.ru</a>\n                    <p className=\"header-top__additional\">На связи в любое время</p>\n                </div>\n                </div>\n                </div>\n                <div className=\"header-top__right\">\n                    <ul className=\"header-top__list\">\n                        <li className=\"header-top__item\">\n                            <a href=\"\" className=\"header-top__link\">О компании</a>\n                        </li>\n                        <li className=\"header-top__item\">\n                            <a href=\"\" className=\"header-top__link\">Доставка и оплата</a>\n                        </li>\n                        <li className=\"header-top__item\">\n                            <a href=\"\" className=\"header-top__link\">Возврат</a>\n                        </li>\n                        <li className=\"header-top__item\">\n                            <a href=\"\" className=\"header-top__link\">Контакты</a>\n                        </li>\n                    </ul>\n                </div>\n                </div>\n            </section>\n            <section className=\"header-down\">\n                <div className=\"container header-down__container\">\n                    <div className=\"header-down__block\">\n                        <svg className=\"header-down__logo\" width=\"156\" height=\"66\" viewBox=\"0 0 156 66\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><g clipPath=\"url(#clip0_6154_674)\"><path d=\"M48.513 24.6743C48.4887 21.1069 47.3262 17.6401 45.1945 14.7779C45.166 14.7184 45.1263 14.665 45.0775 14.6205C43.6528 12.7179 41.9212 11.0654 39.9534 9.73077C39.902 9.68971 39.8478 9.65214 39.7913 9.61832C36.7412 7.58887 33.3044 6.21058 29.6963 5.56979H29.6513C29.6277 5.56304 29.6028 5.56304 29.5792 5.56979C28.6787 5.39885 27.7106 5.27739 26.756 5.19642C26.684 3.20815 26.2742 1.98009 25.7925 1.21537C25.6452 0.932775 25.4413 0.6835 25.1934 0.483059C24.9455 0.282618 24.659 0.135304 24.3516 0.050293H24.23H24.149C23.8411 0.135495 23.5541 0.282842 23.3055 0.48323C23.0569 0.683619 22.852 0.932792 22.7036 1.21537C22.2173 1.98009 21.8031 3.21264 21.74 5.20092C12.379 5.99263 4.58482 11.1073 1.47797 18.0258C1.46026 18.0621 1.44521 18.0997 1.43294 18.1382C0.514142 20.2046 0.0386646 22.4403 0.0371094 24.7013C0.0371094 30.0589 2.64416 35.0476 7.38549 38.7677C7.06053 40.8612 7.26326 43.0025 7.97534 44.998C6.85867 48.5966 5.86808 53.1895 7.7502 57.0941C7.75102 57.106 7.75102 57.1181 7.7502 57.13C9.9205 61.5834 14.171 62.789 18.282 63.9496C20.2389 64.4245 22.1438 65.092 23.9689 65.9423L24.0319 65.9693H24.0724C24.1144 65.9737 24.1566 65.9737 24.1985 65.9693H24.2661C24.3478 65.9702 24.4284 65.9501 24.5002 65.9109C26.3257 65.051 28.2322 64.3744 30.1916 63.8911C32.533 63.2298 34.9239 62.5416 36.9456 61.2685L37.0042 61.228C38.6115 60.2207 39.9008 58.7798 40.7234 57.0716C42.628 53.1625 41.6239 48.6281 40.5703 45.1149C40.5628 45.0903 40.5505 45.0674 40.5343 45.0474C41.6059 42.4474 41.3087 39.6494 41.1691 38.7137C45.906 35.0116 48.513 30.0319 48.513 24.6743ZM47.4999 24.6743C47.4989 26.1297 47.2912 27.5777 46.883 28.9748C46.1632 27.5083 45.2368 26.1526 44.1319 24.9487C42.0832 22.6996 38.4585 19.9241 32.578 18.8355C36.4358 17.3638 40.4252 16.2627 44.4921 15.5472C46.4222 18.2021 47.4738 21.3931 47.4999 24.6743ZM43.8212 14.643C38.5354 15.5937 33.3914 17.2094 28.5121 19.4517C28.1969 16.9012 27.0622 14.8949 25.5583 14.1617C25.6079 13.9817 25.6484 13.8108 25.6889 13.6398C30.1626 12.1384 34.7849 11.122 39.4761 10.608C41.1117 11.7366 42.5752 13.0957 43.8212 14.643ZM37.9272 47.1122L37.657 47.3506C36.6925 48.1046 35.5578 48.6111 34.3521 48.8261H34.2935H34.199H34.172C31.655 49.2759 28.395 48.9385 24.4281 47.7734H24.3741H24.176H24.1355C22.3286 48.3251 20.4746 48.7091 18.5972 48.9205H18.5161C14.9995 49.2624 12.3519 48.6416 10.6094 47.0492C8.58771 45.2859 8.20948 42.5194 8.20948 40.648C9.06562 42.2584 10.3433 43.6064 11.9062 44.5481C14.4952 46.0776 17.7597 46.3475 21.6185 45.4073C21.8679 45.886 22.2443 46.2869 22.7065 46.5661C23.1687 46.8454 23.6989 46.9923 24.239 46.9907C24.7786 46.9925 25.3083 46.8456 25.7698 46.5663C26.2313 46.2869 26.6068 45.8859 26.8551 45.4073C30.7139 46.3654 33.9828 46.0776 36.5674 44.5481C38.1324 43.609 39.4107 42.2604 40.2641 40.648C40.3001 42.5194 39.9219 45.2858 37.9272 47.1122ZM35.6759 60.8907C33.9293 61.7531 32.0932 62.4214 30.2006 62.8834C29.3373 62.0651 28.5958 61.1274 27.9988 60.099C27.0982 58.484 27.5485 56.7072 28.2194 55.0248C28.332 54.7369 28.4671 54.4265 28.6111 54.1026C29.1605 52.8566 29.8179 51.3541 29.5927 49.9641C30.3309 50.0532 31.0735 50.0997 31.8171 50.1036C32.5634 50.1061 33.3087 50.0489 34.0459 49.9327C34.3296 50.7334 33.9243 52.1099 33.5596 53.3469C33.2496 54.2008 33.0631 55.0945 33.0058 56.0009C33.0046 56.9743 33.2486 57.9323 33.7152 58.7868C34.1818 59.6413 34.856 60.3648 35.6759 60.8907ZM24.2706 64.9392C23.5411 64.3994 21.0151 62.3167 20.5288 58.9114C20.0785 55.8165 21.4068 52.4517 24.4417 48.9025C25.7817 49.2857 27.1441 49.5861 28.5211 49.8022C28.8813 50.9448 28.2464 52.3888 27.6836 53.6708C27.535 54.0127 27.3954 54.3366 27.2784 54.6379C26.5354 56.5498 25.9996 58.592 27.1162 60.5758C27.6622 61.5216 28.3231 62.3965 29.0839 63.1803C27.4282 63.6203 25.8156 64.209 24.2661 64.9392H24.2706ZM36.0631 43.6934C33.6406 45.1239 30.4978 45.3398 26.7425 44.3412C26.6764 44.3193 26.6064 44.3114 26.537 44.318C26.4676 44.3245 26.4003 44.3453 26.3394 44.3791C26.2785 44.413 26.2252 44.459 26.183 44.5144C26.1408 44.5698 26.1105 44.6334 26.0941 44.7011C25.9612 45.0788 25.7136 45.4057 25.386 45.6363C25.0583 45.8669 24.6668 45.9897 24.2661 45.9876C23.862 45.9907 23.4673 45.8663 23.1382 45.632C22.8091 45.3977 22.5624 45.0656 22.4335 44.6831C22.4163 44.618 22.3859 44.5573 22.344 44.5046C22.3022 44.452 22.2498 44.4086 22.1903 44.3772C22.1259 44.3427 22.0552 44.3217 21.9824 44.3155C21.9096 44.3093 21.8363 44.318 21.7671 44.3412C18.0208 45.3353 14.8915 45.1194 12.4645 43.6934C10.5641 42.5211 9.14347 40.7112 8.45713 38.5878C8.86687 37.7601 10.8751 33.9994 15.3868 29.627C15.8685 29.3481 21.9922 26.0014 33.1543 29.654C37.6345 34.0039 39.6787 37.8051 40.0795 38.5923C39.3842 40.7102 37.9594 42.513 36.0586 43.6799L36.0631 43.6934ZM20.9521 20.8957C20.9521 18.3181 21.8931 16.051 23.1719 15.2188C23.311 15.1202 23.4624 15.04 23.6222 14.9804C23.7811 14.9205 23.948 14.8841 24.1175 14.8724H24.3066C24.4787 14.8764 24.649 14.9083 24.8109 14.9669C24.9696 15.0194 25.1209 15.092 25.2611 15.1828C26.4003 15.889 27.2828 17.7289 27.4855 19.9196C27.5205 20.2438 27.5371 20.5697 27.535 20.8957C27.535 20.9497 27.535 21.0082 27.535 21.0667C27.5273 21.9026 27.4122 22.7341 27.1928 23.5408C27.097 23.8757 26.9812 24.2047 26.8461 24.5259C26.2382 25.9699 25.2882 26.919 24.2345 26.919C23.1809 26.919 22.2308 25.9744 21.623 24.5304C21.4775 24.1953 21.3586 23.8494 21.2673 23.4958C21.0459 22.6471 20.9399 21.7726 20.9521 20.8957ZM22.0192 26.9415C20.4959 27.0102 18.9853 27.2516 17.5165 27.6613C18.4846 26.8381 19.5698 25.9879 20.7675 25.1332C21.0689 25.8083 21.4933 26.4215 22.0192 26.9415ZM26.3373 27.0855C26.9346 26.5408 27.4089 25.8753 27.7286 25.1332C29.0794 26.1093 30.3312 27.1035 31.4478 28.0796C29.7721 27.6188 28.0636 27.2865 26.3373 27.0855ZM25.9185 12.4883C26.3134 10.6926 26.5753 8.87035 26.702 7.03625C27.6025 6.86082 28.5256 6.69437 29.4757 6.54143C32.5196 7.09115 35.4411 8.17879 38.1028 9.75327C33.9646 10.2817 29.8853 11.1974 25.9185 12.4883ZM23.4826 1.80465C23.6487 1.47941 23.9072 1.21029 24.2255 1.03093C24.5428 1.21175 24.8008 1.48048 24.9685 1.80465C25.3017 2.36695 25.6439 3.36559 25.7159 5.08846C25.7159 5.40335 25.7159 5.74073 25.7159 6.10509V6.20855C25.7159 6.53694 25.6889 6.87881 25.6664 7.25667C25.5032 9.14738 25.2022 11.0237 24.7658 12.8706C24.6938 13.199 24.6218 13.5319 24.5407 13.8783C24.4365 13.862 24.331 13.8545 24.2255 13.8558C24.1021 13.8579 23.9788 13.8669 23.8563 13.8828C23.8068 13.6713 23.7528 13.4644 23.7077 13.253C23.2935 11.4973 22.9927 9.71673 22.8072 7.92243C22.7712 7.56256 22.7441 7.22069 22.7306 6.8968C22.7171 6.57292 22.7036 6.357 22.6991 6.10509C22.6991 5.74073 22.6991 5.40335 22.6991 5.09296C22.8072 3.36559 23.1539 2.36695 23.4826 1.80465ZM21.7175 6.17706C21.7175 6.48745 21.74 6.81583 21.7626 7.15321C12.5231 9.66329 6.80464 13.37 3.89591 15.7001C7.46203 10.5315 14.0315 6.85182 21.7175 6.17706ZM2.32447 18.5206C2.68018 18.1382 4.67937 16.069 8.62823 13.7118C12.7669 11.2886 17.2135 9.43357 21.8481 8.19683C22.0543 10.0254 22.37 11.84 22.7937 13.6309C17.7955 15.5443 13.1809 18.3369 9.16855 21.8764C5.11614 25.547 3.0539 28.9658 2.22091 30.6122C1.4126 28.6967 1.0052 26.6362 1.02379 24.5575C1.04237 22.4788 1.48655 20.4259 2.32897 18.5251L2.32447 18.5206ZM2.77474 31.7997C3.40511 30.3783 7.92131 21.1431 21.722 15.1558C20.6369 16.4243 19.9435 18.4981 19.9435 20.8912C19.9328 21.9782 20.0846 23.0608 20.3937 24.103C12.379 29.744 8.72729 35.8483 7.72319 37.7421C5.67813 36.1253 3.99152 34.1018 2.77024 31.7997H2.77474ZM8.62823 46.2935C8.98696 46.8681 9.41995 47.3929 9.91599 47.8544C10.7584 48.6155 11.7551 49.1863 12.8382 49.5278C11.7783 49.863 10.8041 50.4248 9.98354 51.1742C8.98106 52.1385 8.28431 53.3758 7.97984 54.7324C7.30894 51.9524 7.86277 48.9205 8.60572 46.2935H8.62823ZM8.72729 56.7702C9.01546 49.9686 15.3868 50.0721 15.6659 50.0811C15.7135 50.0828 15.7609 50.0751 15.8055 50.0586C16.1432 50.0586 16.4899 50.0856 16.8411 50.0586C14.7519 51.705 13.4866 53.6123 13.0814 55.749C12.7527 57.6744 13.0443 59.6544 13.9144 61.4035C11.7531 60.4813 9.89799 59.1453 8.70478 56.7702H8.72729ZM15.4138 61.9928C15.0401 61.4215 13.5272 58.8844 14.0945 55.947C14.5448 53.6663 16.1072 51.6555 18.7683 49.9686C20.1541 49.8197 21.5268 49.5671 22.8747 49.2129C20.2136 52.6452 19.0835 55.9605 19.5337 59.0553C19.8091 60.8538 20.5792 62.5404 21.7581 63.9271C20.6999 63.5582 19.6193 63.2523 18.5567 62.9509C17.494 62.6495 16.4089 62.3436 15.4138 61.9928ZM36.68 60.2699C35.8833 59.866 35.2141 59.2495 34.7468 58.4888C34.2794 57.7282 34.0322 56.853 34.0324 55.9605C34.0975 55.1602 34.2686 54.3721 34.5412 53.6168C34.9554 52.2313 35.3742 50.8053 35.0635 49.7167C35.8995 49.5136 36.7007 49.1877 37.4409 48.7496C37.4409 52.6317 39.5797 54.3006 40.4712 54.8314C40.3192 55.4659 40.1003 56.0827 39.8183 56.6712C39.1086 58.132 38.0183 59.3751 36.6619 60.2699H36.68ZM40.6828 53.7518C39.8048 53.1085 38.2559 51.4666 38.49 47.9804L38.6341 47.8544C39.1135 47.4149 39.5328 46.9143 39.8814 46.3654C40.5027 48.6416 41.0115 51.2507 40.6648 53.7518H40.6828ZM40.7954 37.7556C39.8093 35.8933 36.1711 29.8115 28.1158 24.148C28.4415 23.0949 28.6025 21.9979 28.5931 20.8957C28.5931 20.7878 28.5931 20.6753 28.5931 20.5718C29.3 20.23 30.0295 19.8971 30.7814 19.5867C37.3419 20.3694 41.2457 23.2799 43.3664 25.5965C44.6716 26.992 45.7026 28.6202 46.4057 30.3963C45.1941 33.292 43.2556 35.8267 40.7774 37.7556H40.7954Z\" fill=\"#3F4E65\"/><path d=\"M17.5294 35.9868C16.03 35.9868 14.6882 36.6436 14.1839 37.6242C14.1239 37.7437 14.1134 37.8819 14.1547 38.0091C14.196 38.1362 14.2858 38.242 14.4046 38.3035C14.476 38.3387 14.5545 38.3572 14.6342 38.3574C14.7273 38.3577 14.8186 38.3322 14.8981 38.2837C14.9776 38.2353 15.0421 38.1658 15.0845 38.083C15.4131 37.4443 16.4353 36.9944 17.5294 36.9944C18.6236 36.9944 19.6457 37.4443 19.9789 38.083C20.0089 38.1422 20.0504 38.1949 20.1008 38.238C20.1513 38.2812 20.2098 38.3139 20.273 38.3344C20.3362 38.3549 20.4028 38.3627 20.469 38.3574C20.5352 38.3521 20.5997 38.3338 20.6588 38.3035C20.7787 38.242 20.8693 38.1354 20.9107 38.0072C20.9521 37.879 20.9408 37.7396 20.8794 37.6197C20.3661 36.6436 19.0153 35.9868 17.5294 35.9868Z\" fill=\"#3F4E65\"/><path d=\"M30.9788 35.9868C29.4794 35.9868 28.1331 36.6436 27.6333 37.6242C27.6024 37.6831 27.5836 37.7476 27.578 37.8139C27.5723 37.8802 27.58 37.947 27.6006 38.0102C27.6211 38.0735 27.6541 38.132 27.6976 38.1824C27.7412 38.2328 27.7943 38.2739 27.854 38.3035C27.9254 38.3387 28.004 38.3572 28.0836 38.3574C28.1767 38.3577 28.268 38.3322 28.3475 38.2837C28.427 38.2353 28.4915 38.1658 28.5339 38.083C28.8626 37.4443 29.8847 36.9944 30.9788 36.9944C32.073 36.9944 33.0951 37.4443 33.4283 38.083C33.4583 38.1422 33.4998 38.1949 33.5503 38.238C33.6007 38.2812 33.6592 38.3139 33.7224 38.3344C33.7856 38.3549 33.8522 38.3627 33.9184 38.3574C33.9846 38.3521 34.0491 38.3338 34.1082 38.3035C34.2273 38.2411 34.3171 38.1345 34.3584 38.0066C34.3997 37.8788 34.389 37.7398 34.3288 37.6197C33.82 36.6436 32.4737 35.9868 30.9788 35.9868Z\" fill=\"#3F4E65\"/><path d=\"M63.8707 29.0774C67.1621 29.0774 70.7282 30.8767 71.3406 35.1097H67.3467C66.7794 33.4993 65.5727 32.7705 63.8707 32.7705C61.4887 32.7705 59.9218 34.5699 59.9218 37.1924C59.9218 39.5316 61.4662 41.5693 63.8707 41.5963C65.5997 41.5963 66.982 40.7327 67.4143 39.0323H71.4081C70.8183 43.5306 67.2567 45.2895 63.8707 45.2895C59.8182 45.312 55.7433 42.5905 55.7208 37.1924C55.6983 31.7944 59.8317 29.0774 63.8707 29.0774Z\" fill=\"#3F4E65\"/><path d=\"M77.7655 44.6959L80.2509 39.5767L74.9062 29.8513V29.2395H79.445L82.4437 35.0874H82.5563L85.2804 29.2395H89.7066V29.8513L82.1466 45.1457H77.7655V44.6959Z\" fill=\"#3F4E65\"/><path d=\"M94.7054 45.1455H90.7295V44.5562L97.8798 29.0684H99.6133L106.818 44.5427V45.1455H102.842L98.7578 35.8474L94.7054 45.1455Z\" fill=\"#3F4E65\"/><path d=\"M108.668 32.8875V29.2573H120.47V32.8875H116.588V45.1456H112.572V32.8875H108.668Z\" fill=\"#3F4E65\"/><path d=\"M133.5 43.1347H127.236L126.304 45.1455H122.333V44.5562L129.483 29.0684H131.23L138.403 44.5562V45.1455H134.432L133.5 43.1347ZM130.348 35.4875L128.547 39.662H132.18L130.348 35.4875Z\" fill=\"#3F4E65\"/><path d=\"M156 45.1456H151.844V38.7579H146.941V45.1456H142.789V29.2573H146.941V35.0152H151.844V29.2573H156V45.1456Z\" fill=\"#3F4E65\"/></g><defs><clipPath id=\"clip0_6154_674\"><rect width=\"156\" height=\"66\" fill=\"white\"/></clipPath></defs></svg>\n                    </div>\n                    <div className=\"header-down__block header-down__block_btn\">\n                        <p className=\"header-down__btn-name\">Каталог</p>\n                        <svg className='header-down__img header-down__img_catalog' width=\"15\" height=\"15\" viewBox=\"0 0 15 15\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M0.5 2C0.5 1.17157 1.17157 0.5 2 0.5H6C6.27614 0.5 6.5 0.723858 6.5 1V6C6.5 6.27614 6.27614 6.5 6 6.5H1C0.723858 6.5 0.5 6.27614 0.5 6V2Z\" stroke=\"white\"/><path d=\"M8.5 1C8.5 0.723858 8.72386 0.5 9 0.5H13C13.8284 0.5 14.5 1.17157 14.5 2V6C14.5 6.27614 14.2761 6.5 14 6.5H9C8.72386 6.5 8.5 6.27614 8.5 6V1Z\" stroke=\"white\"/><path d=\"M8.5 9C8.5 8.72386 8.72386 8.5 9 8.5H14C14.2761 8.5 14.5 8.72386 14.5 9V13C14.5 13.8284 13.8284 14.5 13 14.5H9C8.72386 14.5 8.5 14.2761 8.5 14V9Z\" stroke=\"white\"/><path d=\"M0.5 9C0.5 8.72386 0.723858 8.5 1 8.5H6C6.27614 8.5 6.5 8.72386 6.5 9V14C6.5 14.2761 6.27614 14.5 6 14.5H2C1.17157 14.5 0.5 13.8284 0.5 13V9Z\" stroke=\"white\"/></svg>\n                    </div>\n                    <div className=\"header-down__block header-down__block_input\">\n                        <input className=\"header-down__input\" type=\"text\" placeholder=\"Поиск...\" />\n                        <div className=\"header-down__btn\">\n                            <svg className=\"header-down__img header-down__img_search\" width=\"19\" height=\"19\" viewBox=\"0 0 19 19\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M16.5294 16.5294L13.0989 13.0928L16.5294 16.5294ZM15 8.5C15 10.2239 14.3152 11.8772 13.0962 13.0962C11.8772 14.3152 10.2239 15 8.5 15C6.77609 15 5.12279 14.3152 3.90381 13.0962C2.68482 11.8772 2 10.2239 2 8.5C2 6.77609 2.68482 5.12279 3.90381 3.90381C5.12279 2.68482 6.77609 2 8.5 2C10.2239 2 11.8772 2.68482 13.0962 3.90381C14.3152 5.12279 15 6.77609 15 8.5V8.5Z\" stroke=\"white\" strokeWidth=\"1.3\" strokeLinecap=\"round\"/></svg>\n                        </div>\n                    </div>\n                    <div className=\"header-down__block_cons\">\n                        <div className=\"header-down__internal\">\n                            <a href=\"tel:+77774900091\" className=\"header-down__phone\">+7 (777) 490-00-91</a>\n                            <p className=\"header-down__additional\">время работы: 9:00-20:00</p>\n                            <a href=\"\" className=\"header-down__order\">Заказать звонок</a>\n                        </div>\n                        <div className=\"header-down__photo\"></div>\n                    </div>\n                    <div className=\"header-down__block header-down__block_btn\">\n                        <p className=\"header-down__btn-name\">Прайс-лист</p>\n                        <svg className='header-down__img header-down__img_download' width=\"18\" height=\"17\" viewBox=\"0 0 18 17\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M13.958 6.375H11.1247V2.125H6.87467V6.375H4.04134L8.99967 12.0417L13.958 6.375ZM3.33301 13.4583H14.6663V14.875H3.33301V13.4583Z\" fill=\"white\"/></svg>            \n                    </div>\n                    <div className=\"header-down__block_basket\">\n                    <Link to='/basket'>\n                        <svg className=\"header-down__img header-down__img_basket\" width=\"46\" height=\"46\" viewBox=\"0 0 46 46\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M41.6514 13.7862C41.3916 13.4233 41.043 13.2418 40.6055 13.2418H12.7559L12 11.274C11.8086 10.6289 11.5488 10.0778 11.2207 9.6208C10.8926 9.16381 10.5439 8.84123 10.1748 8.65306C9.80566 8.46489 9.48438 8.3372 9.21094 8.27C8.9375 8.20279 8.66406 8.16919 8.39062 8.16919H2.77148C2.41602 8.16919 2.11523 8.29016 1.86914 8.53209C1.62305 8.77403 1.5 9.08317 1.5 9.45951C1.5 9.67457 1.55469 9.8829 1.66406 10.0845C1.77344 10.2861 1.93066 10.4407 2.13574 10.5482C2.34082 10.6557 2.55273 10.7095 2.77148 10.7095H8.39062C8.5 10.7095 8.60254 10.723 8.69824 10.7498C8.79395 10.7767 8.92383 10.891 9.08789 11.0926C9.25195 11.2942 9.38867 11.5966 9.49805 11.9998L15.3809 28.1531C15.4355 28.3144 15.5244 28.4689 15.6475 28.6168C15.7705 28.7646 15.9141 28.8789 16.0781 28.9595C16.2422 29.0402 16.4199 29.0805 16.6113 29.0805H34.3301C34.6035 29.0805 34.8564 28.9998 35.0889 28.8385C35.3213 28.6773 35.4785 28.4756 35.5605 28.2337L41.8359 14.9757C41.9727 14.5456 41.9111 14.1491 41.6514 13.7862ZM33.4277 26.4998H17.6367L13.4531 15.8225H38.7188L33.4277 26.4998ZM31.0625 30.4798C30.1602 30.4798 29.3877 30.7957 28.7451 31.4274C28.1025 32.0591 27.7812 32.8186 27.7812 33.7057C27.7812 34.5928 28.1025 35.3522 28.7451 35.9839C29.3877 36.6156 30.1602 36.9315 31.0625 36.9315C31.9648 36.9315 32.7373 36.6156 33.3799 35.9839C34.0225 35.3522 34.3438 34.5928 34.3438 33.7057C34.3438 32.8186 34.0225 32.0591 33.3799 31.4274C32.7373 30.7957 31.9648 30.4798 31.0625 30.4798ZM19.25 30.4798C18.6484 30.4798 18.0947 30.6277 17.5889 30.9234C17.083 31.2191 16.6865 31.6089 16.3994 32.0927C16.1123 32.5766 15.9688 33.1143 15.9688 33.7057C15.9688 34.5928 16.29 35.3522 16.9326 35.9839C17.5752 36.6156 18.3477 36.9315 19.25 36.9315C20.1523 36.9315 20.9248 36.6156 21.5674 35.9839C22.21 35.3522 22.5312 34.5928 22.5312 33.7057C22.5312 33.4906 22.5107 33.2755 22.4697 33.0605C22.4287 32.8454 22.3672 32.6438 22.2852 32.4557C22.2031 32.2675 22.1006 32.086 21.9775 31.9113C21.8545 31.7366 21.7178 31.5753 21.5674 31.4274C21.417 31.2796 21.2529 31.1452 21.0752 31.0242C20.8975 30.9032 20.7129 30.8024 20.5215 30.7218C20.3301 30.6411 20.125 30.5806 19.9062 30.5403C19.6875 30.5 19.4688 30.4798 19.25 30.4798Z\" fill=\"#3F4E65\"/></svg>\n                        <p className=\"header-down__counter\">3</p>\n                    </Link>\n                    <div className=\"header-down__basket\">\n                        <p className=\"header-down__additional\">Корзина</p>\n                        <p className=\"header-down__price\">{finalPrice} ₸</p>\n                    </div>\n                    </div>\n                </div>\n            </section>\n        </div>\n    )\n}\n\nexport default Header;","/Users/mspolermo/git/sultan-web-app/src/components/BasketItem.tsx",["219","220","221"],[],"import React, {FC, useEffect, useMemo, useState} from \"react\";\nimport { IBasketGoods, IGoods } from \"../types/types\";\n\ninterface BasketItemProps {\n    order: IBasketGoods;\n    totalValue?: number;\n    onTotalChange?: (newTotal: Array<number>) => void;\n    onRemove? : (removeItem :IGoods) => void;\n};\n\n\nconst BasketItem: FC<BasketItemProps> = ({order, totalValue, onTotalChange, onRemove}) => {\n    const [counter, setCounter] = useState (order.basketCount)\n\n    function upCounter () {\n        setCounter(counter+1)\n    }\n    function downCounter () {\n        if (counter>0) {\n            setCounter(counter-1)   \n    }\n    }\n    useEffect( () => {\n        onTotalChange?.(([order.id ,counter]))\n    }, [counter])\n\n    function removing () {\n        onRemove?.(order);\n    }\n\n    return (\n        <div style={{margin: 10, border: '2px solid black', padding: 10, width: '400px', height: '500px'}}>\n            <div className=\"goods-list__img-block\">\n                <img className=\"goods-list__img\" src={order.image} alt=\"Img\" />\n            </div>\n            {order.sizeType == 'weight' ? (\n                <div className=\"goods-list__size\">\n                    <svg width=\"20\" height=\"15\" viewBox=\"0 0 20 15\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M13.3035 7.99994C12.7753 7.99994 12.2785 7.71869 12.0097 7.26869L10.0003 3.93743L7.9941 7.26869C7.72222 7.72181 7.22535 8.00306 6.69722 8.00306C6.5566 8.00306 6.41597 7.98431 6.2816 7.94369L2.00035 6.71868V12.2812C2.00035 12.7406 2.31285 13.1406 2.7566 13.2499L9.51285 14.9406C9.8316 15.0187 10.166 15.0187 10.4816 14.9406L17.2441 13.2499C17.6878 13.1374 18.0003 12.7374 18.0003 12.2812V6.71868L13.7191 7.94056C13.5847 7.98119 13.4441 7.99994 13.3035 7.99994ZM19.9472 4.49369L18.3378 1.28118C18.241 1.08743 18.0316 0.974934 17.816 1.00306L10.0003 1.99993L12.866 6.75306C12.9847 6.94993 13.2222 7.04368 13.4441 6.98118L19.6285 5.21556C19.9378 5.12493 20.0878 4.78118 19.9472 4.49369ZM1.66285 1.28118L0.0534711 4.49369C-0.0902789 4.78118 0.0628461 5.12493 0.369096 5.21243L6.55347 6.97806C6.77535 7.04056 7.01285 6.94681 7.1316 6.74993L10.0003 1.99993L2.1816 1.00306C1.96597 0.978059 1.75972 1.08743 1.66285 1.28118Z\" fill=\"#3F4E65\"/></svg>\n                    <p className=\"goods-list__size-description\">{order.size} г</p>\n                </div>\n            ) : (\n                <div className=\"goods-list__size\">\n                    <svg width=\"9\" height=\"15\" viewBox=\"0 0 9 15\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M8.1 14.0625C8.05312 14.3164 7.95234 14.5361 7.79766 14.7217C7.64297 14.9072 7.44375 15 7.2 15H1.8C1.55625 15 1.35938 14.9097 1.20938 14.729C1.05937 14.5483 0.95625 14.3262 0.9 14.0625L0 8.4375V6.5625C0 6.2793 0.0914062 6.04492 0.274219 5.85938C0.457031 5.67383 0.726562 5.49072 1.08281 5.31006C1.43906 5.12939 1.65937 5.00977 1.74375 4.95117C2.11875 4.67773 2.45625 4.35547 2.75625 3.98438C3.05625 3.61328 3.27656 3.22266 3.41719 2.8125H3.15C3.02812 2.8125 2.92266 2.76611 2.83359 2.67334C2.74453 2.58057 2.7 2.4707 2.7 2.34375V0.46875C2.7 0.341797 2.74453 0.231934 2.83359 0.13916C2.92266 0.0463867 3.02812 0 3.15 0H5.85C5.97187 0 6.07734 0.0463867 6.16641 0.13916C6.25547 0.231934 6.3 0.341797 6.3 0.46875V2.34375C6.3 2.4707 6.25547 2.58057 6.16641 2.67334C6.07734 2.76611 5.97187 2.8125 5.85 2.8125H5.58281C5.86406 3.60352 6.38437 4.28711 7.14375 4.86328C7.24687 4.95117 7.48125 5.08789 7.84687 5.27344C8.2125 5.45898 8.49609 5.64941 8.69766 5.84473C8.89922 6.04004 9 6.2793 9 6.5625V8.4375L8.1 14.0625Z\" fill=\"#3F4E65\"/></svg>\n                    <p className=\"goods-list__size-description\">{order.size} мл</p>\n                </div>\n            )}\n            <div className=\"goods-list__description\">\n                <span className=\"goods-list__title\">{order.title}</span> \n                <span className=\"goods-list__title-additional\">{order.desription}</span>\n            </div>\n            <button onClick= {downCounter}>-</button>\n            <p>Количество {counter}</p>\n            <button onClick= {upCounter}>+</button>\n            <p className=\"goods-list__price\">{order.price} ₸</p>\n            <button onClick={removing}>Удалить</button>            \n        </div>\n    )\n}\nexport default BasketItem","/Users/mspolermo/git/sultan-web-app/src/pages/AdminPage.tsx",["222","223","224","225","226","227","228","229","230","231","232","233","234","235"],[],"import React, {FC, useEffect, useMemo, useState} from \"react\";\nimport AddNewProduct from \"../components/AddNewProduct\";\nimport AdminList from \"../components/AdminList\";\nimport { IGoods } from \"../types/types\";\n\ninterface AdminPageProps {\n    onGoodsUpdate : (products :IGoods []) => void;\n    JSONfile: IGoods []\n}\n\nconst AdminPage: FC<AdminPageProps> =({onGoodsUpdate, JSONfile}) => {\n\n\n    // const Breadcrumbs = ({ ...rest, match }) => (\n    //     <span>\n    //         <Link to={match.url || ''} className={match.isExact ? 'breadcrumb active' : 'breadcrumb'}>\n    //             {match.url.substr(match.url.lastIndexOf('/')+1, match.url.length)}\n    //         </Link>\n    //         <Route path={`${match.url}/:path`} component={Breadcrumbs} />\n    //     </span>\n    //   )\n\n    const [products, setProducts] = useState(JSONfile)\n    useEffect( () => {\n        if (products) {\n            onGoodsUpdate?.(products)\n        } \n    }, [products])\n\n\n\n    const createProduct = (newProduct:IGoods) => {\n        if (newProduct !== undefined) {\n        if (newProduct.title == '') {\n            alert('Заполните поле Title')\n        } else if( newProduct.image == '') {\n            alert('Вставте ссылку в поле ImageURL')\n        } else if( newProduct.sizeType == '') {\n            alert('Выберите тип размера товара')\n        } else if( newProduct.size == 0) {\n            alert('Выберите число в поле Размер')\n        } else if( newProduct.barcode == 0) {\n            alert('Выберите число в поле Штрихкод')\n        } else if (newProduct.producer == '') {\n            alert('Заполните поле Производитель')\n        } else if (newProduct.brand == '') {\n            alert('Заполните поле Бренд')\n        } else if (newProduct.desription == '') {\n            alert('Заполните поле Описание')\n        } else if( newProduct.price == 0) {\n            alert('Выберите число в поле Цена')\n        } else if( newProduct.careType.length == 1) {\n            alert('Укажите минимум 1 тип товара')\n        } else {\n            setProducts([...products, newProduct])\n        }\n    }\n    }\n\n\n    const [removeThing, setRemoveThing] = useState<undefined | IGoods>();\n    useMemo(() => {\n\n        let index = products.findIndex ( (order:any) => order.id === removeThing?.id)\n    \n        if (index!== -1) {\n            products.splice(index, 1);\n          \n            setProducts([...products])\n        }\n    }, [removeThing])\n\n\n    const [editThing, setEditThing] = useState<undefined | IGoods> ()\n    useMemo(() => {\n            if (editThing !==undefined) {\n                let editProduct: IGoods = editThing\n                let index = products.findIndex ( (order:any) => order.id === editProduct.id)\n                console.log(index)\n                if (index!== -1) {\n                    products.splice(index, 1);\n                \n                    setProducts([editProduct, ...products])\n                    console.log('изменили')\n                }\n            }\n\n    }, [editThing])\n\n\n    useEffect(() => {\n\n        const rememberMe = localStorage.getItem('storageProducts')\n        if (typeof rememberMe === 'string') {\n            const parse = JSON.parse(rememberMe) // ok\n            setProducts(parse)\n        }\n\n    }, [])\n\n    useEffect(() => {\n        localStorage.setItem('storageProducts', JSON.stringify(products))\n    }, [products])\n\n\n    const handleFormJson = () => {\n        setProducts(JSONfile)\n    }\n\n\n    if (products.length == 0) {\n        setProducts(JSONfile)\n    }\n\n\n    \n    return (\n        <div>\n            <button onClick={handleFormJson}>Загрузить список из JSON-файла</button>\n            <AddNewProduct create={createProduct}/>\n            <AdminList products={products} onRemove={setRemoveThing} onEdit={setEditThing}/>\n        </div>\n    )\n}\n\nexport default AdminPage;\n\n","/Users/mspolermo/git/sultan-web-app/src/components/AddNewProduct.tsx",["236","237","238"],[],"\nimport React, {FC, useEffect, useState} from \"react\";\nimport { IGoods } from \"../types/types\";\nimport CaretypeCheckbox from \"./UI/checkbox/CaretypeCheckbox\";\nimport MyInput from \"./UI/input/MyInput\";\nimport MySelect from \"./UI/select/MySelect\";\n\ninterface AddNewProductProps {\n    create?: any;\n}\n\nconst AddNewProduct: FC<AddNewProductProps> =({create}) => {\n\n    const [product, setProduct] = useState<IGoods | undefined> (undefined)\n    const createProduct = (e:any) => {\n        e.preventDefault()\n        setProduct({id: Date.now(), title: title, image: imgURL, sizeType: sizeType, size: size, barcode: barcode, producer: producer, brand: brand, desription: desription, price: price, careType: careType})\n        //console.log(product)\n    }\n    useEffect (() => {\n        if (product !== undefined) {\n            create({...product})\n        }\n    },[product])\n\n    \n\n    const [title, setTitle] = useState('')\n    const titleChanger = (value:string) => {\n        setTitle(value);\n    }\n\n    const [imgURL, setimgURL] = useState('')\n    const imgURLChanger = (value:string) => {\n        setimgURL(value);\n    }\n\n    const [sizeType, setsizeType] = useState('')\n    const sizeTypeChanger = (value:string) => {\n        setsizeType(value);\n    }\n\n    const [size, setSize] = useState(0)\n    const sizeChanger = (value:number) => {\n        setSize(value);\n    }\n\n    const [barcode, setBarcode] = useState(0)\n    const barcodeChanger = (value:number) => {\n        setBarcode(value);\n    }\n    \n    const [producer, setProducer] = useState('')\n    const producerChanger = (value:string) => {\n        setProducer(value);\n    }\n\n    const [brand, setBrand] = useState('')\n    const brandChanger = (value:string) => {\n        setBrand(value);\n    }\n\n    const [desription, setDesription] = useState('')\n    const desriptionChanger = (value:string) => {\n        setDesription(value);\n    }\n\n    const [price, setPrice] = useState(0)\n    const priceChanger = (value:number) => {\n        setPrice(value);\n    }\n\n    const [careType, setCareType ] = useState<any>([\"requerType\"])\n    const careTypeChanger = (value:Array<string>) => {\n        if (value[0] == 'add') {\n            let addingType = [...careType, value[1]]\n            setCareType(addingType)\n        } else if (value[0] == 'remove') {\n            let removingType = [...careType]\n            let index = removingType.indexOf(value[1], 0)\n            removingType.splice(index, 1)\n            setCareType(removingType)\n        }\n    }\n\n    return (\n        <div style={{display: 'flex', flexDirection: 'column', maxWidth: '300px'}}>\n            <MyInput value={title} onChange={titleChanger} placeholder = \"Title\" />\n            <MyInput value={imgURL} onChange={imgURLChanger} placeholder = \"ImageURL\" />\n            <MySelect\n                        value={sizeType}\n                        onChange={sizeTypeChanger}\n                        defaultValue='Тип размера'\n                        options={[\n                            {value: 'weight', name: 'Вес (гр)'},\n                            {value: 'volume', name: 'Объем (мл)'}\n                        ]}\n            />\n            <MyInput value={size} type={'number'} onChange={sizeChanger} placeholder = 'Размер' />\n            <MyInput value={barcode} type={'number'} onChange={barcodeChanger} placeholder = 'Штрихкод' />\n            <MyInput value={producer} onChange={producerChanger} placeholder = 'Производитель' />\n            <MyInput value={brand} onChange={brandChanger} placeholder = 'Бренд' />\n            <MyInput value={desription} onChange={desriptionChanger} placeholder = 'Описание' />\n            <MyInput value={price} type={'number'} onChange={priceChanger} placeholder = 'Цена' />\n            <div>Укажите тип товара:\n                <div>\n                    <CaretypeCheckbox name='Уход за телом' value='body' onClick={careTypeChanger} /> \n                    <CaretypeCheckbox name='Уход за руками' value='hands' onClick={careTypeChanger} />\n                    <CaretypeCheckbox name='Уход за ногами' value='legs' onClick={careTypeChanger} />  \n                    <CaretypeCheckbox name='Уход за лицом' value='face' onClick={careTypeChanger} />\n                    <CaretypeCheckbox name='Уход за волосами' value='hair' onClick={careTypeChanger} /> \n                    <CaretypeCheckbox name='Средства для загара' value='sun' onClick={careTypeChanger} />\n                    <CaretypeCheckbox name='Средства для бритья' value='shaving' onClick={careTypeChanger} />  \n                    <CaretypeCheckbox name='Подарочные наборы' value='present' onClick={careTypeChanger} />\n                    <CaretypeCheckbox name='Гигиеническая продукция' value='hygienic' onClick={careTypeChanger} />\n                    <CaretypeCheckbox name='Гигиена полости рта' value='mouth' onClick={careTypeChanger} /> \n                    <CaretypeCheckbox name='Бумажная продукция' value='paper' onClick={careTypeChanger} />                  \n                </div>\n\n            </div>\n            <button onClick={createProduct}>Добавить позицию</button>\n        </div>\n    )\n}\n\nexport default AddNewProduct","/Users/mspolermo/git/sultan-web-app/src/components/UI/checkbox/CaretypeCheckbox.tsx",["239"],[],"import React, {FC, useState} from \"react\";\n\ninterface CaretypeCheckboxProps {\n    name: string,\n    value: string,\n    onClick: any;\n\n}\n\nconst CaretypeCheckbox: FC<CaretypeCheckboxProps> = ({name, value, onClick}) => {\n\n\n    const [checked, setChecked] = useState(true);\n\n    function clickHandler () {\n        if (checked==true) {\n           onClick(['add', value])\n           setChecked(!checked)\n           \n        } else {\n            onClick(['remove', value]) \n            setChecked(!checked)\n        }\n    };\n\n    return (\n        <div>\n            <input type=\"checkbox\" name={value} onClick={ (event) => clickHandler()}/>\n            <label htmlFor={value}>{name}</label>    \n        </div>\n    )\n}\n\nexport default CaretypeCheckbox","/Users/mspolermo/git/sultan-web-app/src/components/AdminList.tsx",["240","241","242","243"],[],"import React, {FC, useEffect, useMemo, useState} from \"react\";\nimport { IGoods } from \"../types/types\";\nimport AdminItem from \"./AdminItem\";\nimport GoodsItem from \"./GoodsItem\";\n\ninterface AdminListProps {\n    products: IGoods[];\n    onRemove? : (removeItem :IGoods) => void;\n    onEdit? : (removeItem :any) => void;\n}\n\nconst AdminList: FC<AdminListProps> = ({products, onRemove, onEdit}) => {\n\n    const [removeThing, setRemoveThing] = useState<undefined | IGoods>();\n    useEffect( () => {\n        if (removeThing) {\n            onRemove?.(removeThing) \n        }\n    }, [removeThing])\n\n    const [editThing, setEditThing] = useState<undefined | IGoods> ();\n\n\n    useEffect (() => {\n        onEdit?.(editThing);\n    }, [editThing])\n    \n\n    return (\n        <div>\n            <h1>Список товаров:</h1>\n            {products.map( product => \n              <AdminItem\n                key={product.id} \n                product={product}\n                onRemove={setRemoveThing}\n                onEdit={setEditThing}\n                />\n            )}\n        </div>\n    )\n}\n\nexport default AdminList","/Users/mspolermo/git/sultan-web-app/src/components/AdminItem.tsx",["244","245","246"],[],"import React, {FC, useEffect, useState} from \"react\";\nimport { IGoods } from \"../types/types\";\nimport CaretypeCheckbox from \"./UI/checkbox/CaretypeCheckbox\";\nimport MyInput from \"./UI/input/MyInput\";\nimport MySelect from \"./UI/select/MySelect\";\n\ninterface AdminItemProps {\n    product: IGoods;\n    onRemove? : (removeItem :IGoods) => void;\n    onEdit? : (removeItem :any) => void;\n};\n\nconst AdminItem: FC<AdminItemProps> = ({product, onRemove, onEdit}) => {\n    function removing () {\n        onRemove?.(product);\n    }\n\n    const [editValue, setEditValue] = useState (false)\n    function editing () {\n        setEditValue (!editValue)\n    }\n    \n    // useEffect (() => {\n    //     onEdit?.([editValue, product]);\n    // }, [editValue])\n\n    const [editProduct, setEditProduct] = useState<IGoods | undefined> (undefined)\n    const editingProduct = (e:any) => {\n        e.preventDefault()\n        setEditProduct({id: id, title: title, image: imgURL, sizeType: sizeType, size: size, barcode: barcode, producer: producer, brand: brand, desription: desription, price: price, careType: careType})\n        setEditValue (!editValue)\n    }\n    //console.log(editProduct)\n    useEffect (() => {\n        if (editProduct !== undefined) {\n            onEdit?.(editProduct)\n            // create({...product})\n        }\n    },[editProduct])\n\n    let id = product.id;\n\n    const [title, setTitle] = useState(product.title)\n    const titleChanger = (value:string) => {\n        setTitle(value);\n    }\n\n    const [imgURL, setimgURL] = useState(product.image)\n    const imgURLChanger = (value:string) => {\n        setimgURL(value);\n    }\n\n    const [sizeType, setsizeType] = useState(product.sizeType)\n    const sizeTypeChanger = (value:string) => {\n        setsizeType(value);\n    }\n\n    const [size, setSize] = useState(product.size)\n    const sizeChanger = (value:number) => {\n        setSize(value);\n    }\n\n    const [barcode, setBarcode] = useState(product.barcode)\n    const barcodeChanger = (value:number) => {\n        setBarcode(value);\n    }\n    \n    const [producer, setProducer] = useState(product.producer)\n    const producerChanger = (value:string) => {\n        setProducer(value);\n    }\n\n    const [brand, setBrand] = useState(product.brand)\n    const brandChanger = (value:string) => {\n        setBrand(value);\n    }\n\n    const [desription, setDesription] = useState(product.desription)\n    const desriptionChanger = (value:string) => {\n        setDesription(value);\n    }\n\n    const [price, setPrice] = useState(product.price)\n    const priceChanger = (value:number) => {\n        setPrice(value);\n    }\n\n    const [careType, setCareType ] = useState<any>([\"requerType\"])\n    const careTypeChanger = (value:Array<string>) => {\n        if (value[0] == 'add') {\n            let addingType = [...careType, value[1]]\n            setCareType(addingType)\n        } else if (value[0] == 'remove') {\n            let removingType = [...careType]\n            let index = removingType.indexOf(value[1], 0)\n            removingType.splice(index, 1)\n            setCareType(removingType)\n        }\n    }\n\n    \n\n    return (\n        <div style={{display: 'flex', flexDirection: 'column'}}>\n            <div style={{display: 'flex', margin: '10px 10px', padding: '0 10px', border: '2px solid black'}}>\n                <div>\n                    <p>ID#{product.id}. Название: {product.title}</p>\n                    <p>Описание: {product.desription}</p>\n                    <p>Прооизводитель: {product.producer}. Бренд: {product.brand}</p>\n                    <p>Тип размера: {product.sizeType}. Размер: {product.size}</p>\n                    <p>Штрихкод: {product.barcode}. Цена: {product.price} ₸</p>\n                </div>\n                <div style={{width: 200, borderLeft: ' 2px solid black', borderRight: ' 2px solid black', padding: '0 10px'}}>\n                    <p>Тип ухода:</p>\n                    {product.careType.map( type => \n                        <span key={type}>{type}, </span>)}\n                </div>\n                <div style={{borderRight: ' 2px solid black'}}>\n                    <img src={product.image} alt={product.image} height={150}/>\n                </div>\n                <div>\n                    <button onClick={removing}>Удалить</button>\n                    <button onClick={editing}>Редактировать</button>\n                </div>\n            </div>\n            {editValue && <div>НАЧИНАЕМ РЕДАКТИРОВАТЬ\n                    <div style={{display: 'flex', flexDirection: 'column', maxWidth: '300px'}}>\n                    <MyInput value={title} onChange={titleChanger} placeholder = \"Title\" />\n                    <MyInput value={imgURL} onChange={imgURLChanger} placeholder = \"ImageURL\" />\n                    <MySelect\n                        value={sizeType}\n                        onChange={sizeTypeChanger}\n                        defaultValue='Тип размера'\n                        options={[\n                            {value: 'weight', name: 'Вес (гр)'},\n                            {value: 'volume', name: 'Объем (мл)'}\n                        ]}\n                    />\n                    <MyInput value={size} type={'number'} onChange={sizeChanger} placeholder = 'Размер' />\n                    <MyInput value={barcode} type={'number'} onChange={barcodeChanger} placeholder = 'Штрихкод' />\n                    <MyInput value={producer} onChange={producerChanger} placeholder = 'Производитель' />\n                    <MyInput value={brand} onChange={brandChanger} placeholder = 'Бренд' />\n                    <MyInput value={desription} onChange={desriptionChanger} placeholder = 'Описание' />\n                    <MyInput value={price} type={'number'} onChange={priceChanger} placeholder = 'Цена' />\n                    <div>Укажите тип товара:\n                        <div>\n                            <CaretypeCheckbox name='Уход за телом' value='body' onClick={careTypeChanger} /> \n                            <CaretypeCheckbox name='Уход за руками' value='hands' onClick={careTypeChanger} />\n                            <CaretypeCheckbox name='Уход за ногами' value='legs' onClick={careTypeChanger} />  \n                            <CaretypeCheckbox name='Уход за лицом' value='face' onClick={careTypeChanger} />\n                            <CaretypeCheckbox name='Уход за волосами' value='hair' onClick={careTypeChanger} /> \n                            <CaretypeCheckbox name='Средства для загара' value='sun' onClick={careTypeChanger} />\n                            <CaretypeCheckbox name='Средства для бритья' value='shaving' onClick={careTypeChanger} />  \n                            <CaretypeCheckbox name='Подарочные наборы' value='present' onClick={careTypeChanger} />\n                            <CaretypeCheckbox name='Гигиеническая продукция' value='hygienic' onClick={careTypeChanger} />\n                            <CaretypeCheckbox name='Гигиена полости рта' value='mouth' onClick={careTypeChanger} /> \n                            <CaretypeCheckbox name='Бумажная продукция' value='paper' onClick={careTypeChanger} />                  \n                        </div>\n                    </div>\n                    <button onClick={editingProduct}>Сохранить позицию</button>\n        </div>           \n            \n            \n            \n            </div>}\n            \n        </div>\n    )    \n}\n\nexport default AdminItem","/Users/mspolermo/git/sultan-web-app/src/types/types.tsx",[],[],"/Users/mspolermo/git/sultan-web-app/src/components/Breadcrumbs.tsx",["247","248","249"],[],"import React, {FC} from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { useLocation } from \"react-router-dom\";\nimport { IGoods } from \"../types/types\";\nimport '../App.css'\n\ninterface BreadcrumbsProps {\n    goods: IGoods []\n}\n\nconst Breadcrumbs: FC<BreadcrumbsProps> = ({goods}) => {\n\n    const location = useLocation()\n    //console.log(location)\n\n    let currentLink:any = []\n    const crumbs = location.pathname.split('/')\n       \n        .filter(crumb => crumb !== '')\n        .map ( (crumb:any ) => {\n            currentLink.push(`/${crumb}`)\n            return (\n                <div className=\"breadcrumbs__block\"key={crumb}>\n                    <Link to={currentLink.join('')}>\n                        <div className=\"breadcrumbs__crumb\">\n                        {\n                        (crumb.toString() == 'catalog')\n                            ? ('Каталог')\n                            : (crumb.toString() == 'basket') \n                                ? ('Корзина')\n                                : (crumb.toString() == 'admin')\n                                    ? ('Страница администрирования сайта')\n                                    : (crumb.toString())\n                    }\n                        </div>\n                    </Link>\n                </div>\n            )\n\n        })\n //goods[crumb.toString()].title)\n    return (\n        <div className=\"breadcrumbs\">\n            <div className=\"container breadcrumbs__container\">\n               <Link to='/'>\n                    <div className=\"breadcrumbs__crumb\">\n                        Главная\n                    </div>\n                </Link>\n                {crumbs} \n            </div>\n            \n        </div>\n    )\n}\n\nexport default Breadcrumbs","/Users/mspolermo/git/sultan-web-app/src/pages/Main.tsx",[],[],"/Users/mspolermo/git/sultan-web-app/src/components/UI/Footer/Footer.tsx",["250","251","252","253","254","255","256","257","258","259"],[],"import React, {FC} from \"react\";\n\nconst Footer: FC = () => {\n    return (\n<div>\n    <section className=\"footer\">\n        <div className=\"footer__first\">\n            <div className=\"footer__logo\">\n            <svg className=\"footer__img\" width=\"156\" height=\"66\" viewBox=\"0 0 156 66\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><g clipPath=\"Sultan)\"><path d=\"M48.513 24.6743C48.4887 21.1069 47.3262 17.6401 45.1945 14.7779C45.166 14.7184 45.1263 14.665 45.0775 14.6205C43.6528 12.7179 41.9212 11.0654 39.9534 9.73077C39.902 9.68971 39.8478 9.65214 39.7913 9.61832V9.61832C36.7412 7.58887 33.3044 6.21058 29.6963 5.56979H29.6513C29.6277 5.56304 29.6028 5.56304 29.5792 5.56979V5.56979C28.6787 5.39885 27.7106 5.27739 26.756 5.19642C26.684 3.20815 26.2742 1.98009 25.7925 1.21537C25.6452 0.932775 25.4413 0.6835 25.1934 0.483059C24.9455 0.282618 24.659 0.135304 24.3516 0.050293H24.23H24.149C23.8411 0.135495 23.5541 0.282842 23.3055 0.48323C23.0569 0.683619 22.852 0.932792 22.7036 1.21537C22.2173 1.98009 21.8031 3.21264 21.74 5.20092C12.379 5.99263 4.58482 11.1073 1.47797 18.0258C1.46026 18.0621 1.44521 18.0997 1.43294 18.1382C0.514142 20.2046 0.0386646 22.4403 0.0371094 24.7013C0.0371094 30.0589 2.64416 35.0476 7.38549 38.7677C7.06053 40.8612 7.26326 43.0025 7.97534 44.998V44.998C6.85867 48.5966 5.86808 53.1895 7.7502 57.094C7.75102 57.106 7.75102 57.1181 7.7502 57.13C9.9205 61.5834 14.171 62.789 18.282 63.9496C20.2389 64.4245 22.1438 65.092 23.9689 65.9423L24.0319 65.9693H24.0724C24.1144 65.9737 24.1566 65.9737 24.1985 65.9693H24.2661C24.3478 65.9702 24.4284 65.9501 24.5002 65.9108C26.3257 65.051 28.2322 64.3744 30.1916 63.8911C32.533 63.2298 34.9239 62.5416 36.9456 61.2685L37.0042 61.228C38.6115 60.2207 39.9008 58.7798 40.7234 57.0716C42.628 53.1625 41.6239 48.6281 40.5703 45.1149C40.5628 45.0903 40.5505 45.0674 40.5343 45.0474C41.6059 42.4474 41.3087 39.6494 41.1691 38.7137C45.906 35.0116 48.513 30.0319 48.513 24.6743ZM47.4999 24.6743C47.4989 26.1297 47.2912 27.5777 46.883 28.9748C46.1632 27.5083 45.2368 26.1526 44.1319 24.9487C42.0832 22.6996 38.4585 19.9241 32.578 18.8355C36.4358 17.3638 40.4252 16.2627 44.4921 15.5472C46.4222 18.2021 47.4738 21.3931 47.4999 24.6743V24.6743ZM43.8212 14.643C38.5354 15.5937 33.3914 17.2094 28.5121 19.4517C28.1969 16.9012 27.0622 14.8949 25.5583 14.1617C25.6079 13.9817 25.6484 13.8108 25.6889 13.6398C30.1626 12.1384 34.7849 11.122 39.4761 10.608C41.1117 11.7366 42.5752 13.0957 43.8212 14.643V14.643ZM37.9272 47.1122L37.657 47.3506C36.6925 48.1046 35.5578 48.6111 34.3521 48.8261H34.2935H34.199H34.172C31.655 49.2759 28.395 48.9385 24.4281 47.7734H24.3741H24.176H24.1355C22.3286 48.3251 20.4746 48.7091 18.5972 48.9205H18.5161C14.9995 49.2624 12.3519 48.6416 10.6094 47.0492C8.58771 45.2858 8.20948 42.5194 8.20948 40.648C9.06562 42.2584 10.3433 43.6064 11.9062 44.5481C14.4952 46.0776 17.7597 46.3475 21.6185 45.4073C21.8679 45.886 22.2443 46.2869 22.7065 46.5661C23.1687 46.8454 23.6989 46.9923 24.239 46.9907V46.9907C24.7786 46.9925 25.3083 46.8456 25.7698 46.5663C26.2313 46.2869 26.6068 45.8859 26.8551 45.4073C30.7139 46.3654 33.9828 46.0776 36.5674 44.5481C38.1324 43.609 39.4107 42.2604 40.2641 40.648C40.3001 42.5194 39.9219 45.2858 37.9272 47.1122ZM35.6759 60.8907C33.9293 61.7531 32.0932 62.4214 30.2006 62.8834C29.3373 62.0651 28.5958 61.1274 27.9988 60.099C27.0982 58.484 27.5485 56.7072 28.2194 55.0248C28.332 54.7369 28.4671 54.4265 28.6111 54.1026C29.1605 52.8566 29.8179 51.3541 29.5927 49.9641C30.3309 50.0532 31.0735 50.0997 31.8171 50.1036C32.5634 50.1061 33.3087 50.0489 34.0459 49.9327C34.3296 50.7334 33.9243 52.1099 33.5596 53.3469C33.2496 54.2008 33.0631 55.0945 33.0058 56.001C33.0046 56.9743 33.2486 57.9323 33.7152 58.7868C34.1818 59.6413 34.856 60.3648 35.6759 60.8907ZM24.2706 64.9392C23.5411 64.3994 21.0151 62.3167 20.5288 58.9114C20.0785 55.8165 21.4068 52.4517 24.4417 48.9025C25.7817 49.2857 27.1441 49.5861 28.5211 49.8022V49.8022C28.8813 50.9448 28.2464 52.3888 27.6836 53.6708C27.535 54.0127 27.3954 54.3366 27.2784 54.6379C26.5354 56.5498 25.9996 58.592 27.1162 60.5758C27.6622 61.5216 28.3231 62.3964 29.0839 63.1803C27.4282 63.6203 25.8156 64.209 24.2661 64.9392H24.2706ZM36.0631 43.6934C33.6406 45.1239 30.4978 45.3398 26.7425 44.3412C26.6764 44.3193 26.6064 44.3114 26.537 44.318C26.4676 44.3245 26.4003 44.3453 26.3394 44.3791C26.2785 44.413 26.2252 44.459 26.183 44.5144C26.1408 44.5698 26.1105 44.6334 26.0941 44.7011C25.9612 45.0788 25.7136 45.4057 25.386 45.6363C25.0583 45.8669 24.6668 45.9897 24.2661 45.9876C23.862 45.9907 23.4673 45.8663 23.1382 45.632C22.8091 45.3977 22.5624 45.0656 22.4335 44.6831C22.4163 44.618 22.3859 44.5573 22.344 44.5046C22.3022 44.452 22.2498 44.4086 22.1903 44.3772C22.1259 44.3427 22.0552 44.3217 21.9824 44.3155C21.9096 44.3093 21.8363 44.318 21.7671 44.3412C18.0208 45.3353 14.8915 45.1194 12.4645 43.6934C10.5641 42.5211 9.14347 40.7112 8.45713 38.5878C8.86687 37.7601 10.8751 33.9994 15.3868 29.627C15.8685 29.3481 21.9922 26.0014 33.1543 29.654C37.6345 34.0039 39.6787 37.8051 40.0795 38.5923C39.3842 40.7102 37.9594 42.513 36.0586 43.6799L36.0631 43.6934ZM20.9521 20.8957C20.9521 18.3181 21.8931 16.051 23.1719 15.2188C23.311 15.1202 23.4624 15.04 23.6222 14.9804C23.7811 14.9205 23.948 14.8841 24.1175 14.8724H24.3066C24.4787 14.8764 24.649 14.9083 24.8109 14.9669C24.9696 15.0194 25.1209 15.092 25.2611 15.1828C26.4003 15.889 27.2828 17.7289 27.4855 19.9196C27.5205 20.2438 27.5371 20.5697 27.535 20.8957C27.535 20.9497 27.535 21.0082 27.535 21.0667C27.5273 21.9026 27.4122 22.7341 27.1928 23.5408C27.097 23.8757 26.9812 24.2047 26.8461 24.5259C26.2382 25.9699 25.2882 26.919 24.2345 26.919C23.1809 26.919 22.2308 25.9744 21.623 24.5304C21.4775 24.1953 21.3586 23.8494 21.2673 23.4958C21.0459 22.6471 20.9399 21.7726 20.9521 20.8957V20.8957ZM22.0192 26.9415C20.4959 27.0102 18.9853 27.2516 17.5165 27.6613V27.6613C18.4846 26.8381 19.5698 25.9879 20.7675 25.1332C21.0689 25.8083 21.4933 26.4215 22.0192 26.9415V26.9415ZM26.3373 27.0855C26.9346 26.5408 27.4089 25.8753 27.7286 25.1332C29.0794 26.1093 30.3312 27.1035 31.4478 28.0796C29.7721 27.6188 28.0636 27.2865 26.3373 27.0855ZM25.9185 12.4883C26.3134 10.6926 26.5753 8.87035 26.702 7.03625C27.6025 6.86082 28.5256 6.69437 29.4757 6.54143C32.5196 7.09115 35.4411 8.17879 38.1028 9.75327C33.9646 10.2817 29.8853 11.1974 25.9185 12.4883V12.4883ZM23.4826 1.80465C23.6487 1.47941 23.9072 1.21029 24.2255 1.03093C24.5428 1.21175 24.8008 1.48048 24.9685 1.80465C25.3017 2.36695 25.6439 3.36559 25.7159 5.08846C25.7159 5.40335 25.7159 5.74073 25.7159 6.10509V6.20855C25.7159 6.53694 25.6889 6.87881 25.6664 7.25667C25.5032 9.14738 25.2022 11.0237 24.7658 12.8706C24.6938 13.199 24.6218 13.5319 24.5407 13.8783C24.4365 13.862 24.331 13.8545 24.2255 13.8558C24.1021 13.8579 23.9788 13.8669 23.8563 13.8828C23.8068 13.6713 23.7528 13.4644 23.7077 13.253C23.2935 11.4973 22.9927 9.71673 22.8072 7.92243C22.7712 7.56256 22.7441 7.22069 22.7306 6.8968C22.7171 6.57292 22.7036 6.357 22.6991 6.10509C22.6991 5.74073 22.6991 5.40335 22.6991 5.09296C22.8072 3.36559 23.1539 2.36695 23.4826 1.80465V1.80465ZM21.7175 6.17706C21.7175 6.48745 21.74 6.81583 21.7626 7.15321C12.5231 9.66329 6.80464 13.37 3.89591 15.7001C7.46203 10.5315 14.0315 6.85182 21.7175 6.17706ZM2.32447 18.5206C2.68018 18.1382 4.67937 16.069 8.62823 13.7118C12.7669 11.2886 17.2135 9.43357 21.8481 8.19683C22.0543 10.0254 22.37 11.84 22.7937 13.6309C17.7955 15.5443 13.1809 18.3369 9.16855 21.8764C5.11614 25.547 3.0539 28.9658 2.22091 30.6122C1.4126 28.6967 1.0052 26.6362 1.02379 24.5575C1.04237 22.4788 1.48655 20.4259 2.32897 18.5251L2.32447 18.5206ZM2.77474 31.7997C3.40511 30.3783 7.92131 21.1431 21.722 15.1558C20.6369 16.4243 19.9435 18.4981 19.9435 20.8912C19.9328 21.9782 20.0846 23.0608 20.3937 24.103C12.379 29.744 8.72729 35.8483 7.72319 37.7421C5.67813 36.1253 3.99152 34.1018 2.77024 31.7997H2.77474ZM8.62823 46.2935C8.98696 46.8681 9.41995 47.3929 9.91599 47.8544C10.7584 48.6155 11.7551 49.1863 12.8382 49.5278V49.5278C11.7783 49.863 10.8041 50.4248 9.98354 51.1742C8.98106 52.1385 8.28431 53.3758 7.97984 54.7324C7.30894 51.9524 7.86277 48.9205 8.60572 46.2935H8.62823ZM8.72728 56.7702C9.01546 49.9686 15.3868 50.0721 15.6659 50.0811C15.7135 50.0828 15.7609 50.0751 15.8055 50.0586V50.0586C16.1432 50.0586 16.4899 50.0856 16.8411 50.0586C14.7519 51.705 13.4866 53.6123 13.0814 55.749C12.7527 57.6744 13.0443 59.6544 13.9144 61.4035C11.7531 60.4813 9.89799 59.1453 8.70478 56.7702H8.72728ZM15.4138 61.9928C15.0401 61.4215 13.5272 58.8844 14.0945 55.947C14.5448 53.6663 16.1072 51.6555 18.7683 49.9686C20.1541 49.8197 21.5268 49.5671 22.8747 49.2129C20.2136 52.6452 19.0835 55.9605 19.5337 59.0553C19.8091 60.8538 20.5792 62.5404 21.7581 63.9271C20.6999 63.5582 19.6193 63.2523 18.5567 62.9509C17.494 62.6495 16.4089 62.3436 15.4138 61.9928ZM36.68 60.2699C35.8833 59.866 35.2141 59.2495 34.7468 58.4888C34.2795 57.7282 34.0322 56.853 34.0324 55.9605C34.0975 55.1602 34.2686 54.3721 34.5412 53.6168C34.9554 52.2313 35.3742 50.8053 35.0635 49.7167C35.8995 49.5136 36.7007 49.1877 37.4409 48.7496V48.7496C37.4409 52.6317 39.5797 54.3006 40.4712 54.8314C40.3192 55.4659 40.1003 56.0827 39.8183 56.6712C39.1086 58.132 38.0183 59.3751 36.6619 60.2699H36.68ZM40.6828 53.7518C39.8048 53.1085 38.2559 51.4666 38.49 47.9804L38.6341 47.8544C39.1135 47.4149 39.5328 46.9143 39.8814 46.3654C40.5027 48.6416 41.0115 51.2507 40.6648 53.7518H40.6828ZM40.7954 37.7556C39.8093 35.8933 36.1711 29.8115 28.1158 24.148C28.4415 23.0949 28.6025 21.9979 28.5931 20.8957C28.5931 20.7878 28.5931 20.6753 28.5931 20.5718C29.3 20.23 30.0295 19.8971 30.7814 19.5867C37.3418 20.3694 41.2457 23.2799 43.3664 25.5965C44.6716 26.992 45.7026 28.6202 46.4057 30.3963C45.1941 33.292 43.2556 35.8267 40.7774 37.7556H40.7954Z\" fill=\"white\"/><path d=\"M17.5294 35.9868C16.03 35.9868 14.6882 36.6436 14.1839 37.6242C14.1239 37.7437 14.1134 37.8819 14.1547 38.0091C14.196 38.1362 14.2858 38.242 14.4046 38.3035C14.476 38.3387 14.5545 38.3572 14.6342 38.3574C14.7273 38.3577 14.8186 38.3322 14.8981 38.2837C14.9776 38.2353 15.0421 38.1658 15.0845 38.083C15.4131 37.4443 16.4353 36.9944 17.5294 36.9944C18.6236 36.9944 19.6457 37.4443 19.9789 38.083C20.0089 38.1422 20.0504 38.1949 20.1008 38.238C20.1513 38.2812 20.2098 38.3139 20.273 38.3344C20.3362 38.3549 20.4028 38.3627 20.469 38.3574C20.5352 38.3521 20.5997 38.3338 20.6588 38.3035C20.7787 38.242 20.8693 38.1354 20.9107 38.0072C20.9521 37.879 20.9408 37.7396 20.8794 37.6197C20.3661 36.6436 19.0153 35.9868 17.5294 35.9868Z\" fill=\"white\"/><path d=\"M30.9788 35.9868C29.4794 35.9868 28.1331 36.6436 27.6333 37.6242C27.6024 37.6831 27.5836 37.7476 27.578 37.8139C27.5723 37.8802 27.58 37.947 27.6006 38.0102C27.6211 38.0735 27.6541 38.132 27.6976 38.1824C27.7412 38.2328 27.7943 38.2739 27.854 38.3035C27.9254 38.3387 28.004 38.3572 28.0836 38.3574C28.1767 38.3577 28.268 38.3322 28.3475 38.2837C28.427 38.2353 28.4915 38.1658 28.5339 38.083C28.8626 37.4443 29.8847 36.9944 30.9788 36.9944C32.073 36.9944 33.0951 37.4443 33.4283 38.083C33.4583 38.1422 33.4998 38.1949 33.5503 38.238C33.6007 38.2812 33.6592 38.3139 33.7224 38.3344C33.7856 38.3549 33.8522 38.3627 33.9184 38.3574C33.9846 38.3521 34.0491 38.3338 34.1082 38.3035C34.2273 38.2411 34.3171 38.1345 34.3584 38.0066C34.3997 37.8788 34.389 37.7398 34.3288 37.6197C33.82 36.6436 32.4737 35.9868 30.9788 35.9868Z\" fill=\"white\"/><path d=\"M63.8707 29.0776C67.1621 29.0776 70.7282 30.877 71.3406 35.1099H67.3467C66.7794 33.4995 65.5727 32.7708 63.8707 32.7708C61.4887 32.7708 59.9218 34.5701 59.9218 37.1927C59.9218 39.5318 61.4662 41.5696 63.8707 41.5966C65.5997 41.5966 66.982 40.7329 67.4143 39.0325H71.4081C70.8183 43.5309 67.2567 45.2897 63.8707 45.2897C59.8182 45.3122 55.7433 42.5907 55.7208 37.1927C55.6983 31.7947 59.8317 29.0776 63.8707 29.0776Z\" fill=\"white\"/><path d=\"M77.7655 44.6956L80.2509 39.5765L74.9062 29.851V29.2393H79.445L82.4437 35.0871H82.5563L85.2804 29.2393H89.7066V29.851L82.1466 45.1455H77.7655V44.6956Z\" fill=\"white\"/><path d=\"M94.7054 45.1455H90.7295V44.5562L97.8798 29.0684H99.6133L106.818 44.5427V45.1455H102.842L98.7578 35.8474L94.7054 45.1455Z\" fill=\"white\"/><path d=\"M108.668 32.8875V29.2573H120.47V32.8875H116.588V45.1456H112.572V32.8875H108.668Z\" fill=\"white\"/><path d=\"M133.5 43.1347H127.236L126.304 45.1455H122.333V44.5562L129.483 29.0684H131.23L138.403 44.5562V45.1455H134.432L133.5 43.1347ZM130.348 35.4875L128.547 39.662H132.18L130.348 35.4875Z\" fill=\"white\"/><path d=\"M156 45.1456H151.844V38.7579H146.941V45.1456H142.789V29.2573H146.941V35.0152H151.844V29.2573H156V45.1456Z\" fill=\"white\"/></g><defs><clipPath id=\"clip0_6154_343\"><rect width=\"156\" height=\"66\" fill=\"white\"/></clipPath></defs></svg>\n            </div>\n            <p className=\"footer__desription\">Компания «Султан» — снабжаем розничные магазины товарами \n\"под&nbsp;ключ\" в Кокчетаве и Акмолинской области</p>\n            <p className=\"footer__subscribe\">Подпишись на скидки и акции</p>\n            <div className=\"footer__input-block\">\n                <input className=\"footer__input\" type=\"text\" placeholder=\"Введите ваш E-mail\" />\n                <button className=\"footer__btn\">{'>'}</button>\n            </div>\n        </div>\n        <div className=\"footer__second\">\n            <h3 className=\"footer__head\">Меню сайта:</h3>\n            <a href=\"\"  className=\"footer__item\">О компании</a>\n            <a href=\"\"  className=\"footer__item\">Доставка и оплата</a>\n            <a href=\"\" className=\"footer__item\">Возврат</a>\n            <a href=\"\" className=\"footer__item\">Контакты</a>        \n        </div>\n        <div className=\"footer__third\">\n        <h3 className=\"footer__head\">Категории:</h3>\n                <a href=\"\" className=\"footer__item\">Бытовая химия</a>\n                <a href=\"\" className=\"footer__item\">Косметика и гигиена</a>\n                <a href=\"\" className=\"footer__item\">Товары для дома</a>\n                <a href=\"\" className=\"footer__item\">Товары для детей и мам</a> \n                <a href=\"\" className=\"footer__item\">Посуда</a>  \n        </div>\n        <div className=\"footer__forth\">\n            <h3 className=\"footer__head\">Скачать прайс-лист: </h3>\n            <div className=\"footer__btn footer__btn_price\">\n                <p className=\"footer__price\">Прайс-лист</p>\n                <svg className='footer__img footer__img_download' width=\"18\" height=\"17\" viewBox=\"0 0 18 17\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M13.958 6.375H11.1247V2.125H6.87467V6.375H4.04134L8.99967 12.0417L13.958 6.375ZM3.33301 13.4583H14.6663V14.875H3.33301V13.4583Z\" fill=\"white\"/></svg>            \n            </div>\n            <p className=\"footer__desription\">Связь в мессенджерах:</p>\n            <div className=\"footer__social\">\n                <svg className=\"footer__img\" width=\"39\" height=\"39\" viewBox=\"0 0 39 39\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><rect width=\"39\" height=\"39\" rx=\"19.5\" fill=\"#00E676\"/><path d=\"M27.6784 11.3568C25.5476 9.18112 22.6022 8 19.594 8C13.2017 8 8.06271 13.1594 8.12533 19.4378C8.12533 21.427 8.68936 23.3541 9.62947 25.0946L8 31L14.079 29.4459C15.7711 30.3784 17.6511 30.8136 19.5314 30.8136C25.861 30.8136 31 25.654 31 19.3758C31 16.3298 29.8092 13.4703 27.6785 11.3568H27.6784ZM19.594 28.8866C17.9019 28.8866 16.2098 28.4515 14.7684 27.5812L14.3924 27.3947L10.7575 28.3271L11.6976 24.7839L11.4469 24.4109C8.68936 19.9974 10.0055 14.154 14.5177 11.4189C19.0299 8.68377 24.8583 9.98921 27.6158 14.4649C30.3733 18.9405 29.0572 24.7216 24.545 27.4568C23.1035 28.3892 21.3488 28.8865 19.594 28.8865V28.8866ZM25.1089 21.9866L24.4196 21.6758C24.4196 21.6758 23.4169 21.2407 22.7902 20.9298C22.7275 20.9298 22.6649 20.8676 22.6022 20.8676C22.4141 20.8676 22.2888 20.9298 22.1635 20.992C22.1635 20.992 22.1008 21.0541 21.2234 22.0488C21.1607 22.1731 21.0354 22.2353 20.9101 22.2353H20.8474C20.7847 22.2353 20.6594 22.1731 20.5967 22.111L20.2833 21.9866C19.594 21.6758 18.9673 21.3028 18.4659 20.8055C18.3406 20.6812 18.1525 20.5569 18.0272 20.4326C17.5885 19.9974 17.1498 19.5001 16.8365 18.9406L16.7738 18.8163C16.7112 18.7541 16.7112 18.692 16.6485 18.5677C16.6485 18.4434 16.6485 18.3191 16.7112 18.2569C16.7112 18.2569 16.9619 17.946 17.1498 17.7596C17.2752 17.6352 17.3379 17.4488 17.4632 17.3245C17.5885 17.1379 17.6512 16.8893 17.5885 16.7028C17.5259 16.392 16.7738 14.7136 16.5859 14.3406C16.4605 14.1541 16.3352 14.092 16.1472 14.0298H15.4578C15.3324 14.0298 15.2072 14.092 15.0817 14.092L15.019 14.1541C14.8937 14.2163 14.7684 14.3406 14.643 14.4028C14.5177 14.5272 14.455 14.6514 14.3297 14.7758C13.891 15.3353 13.6403 16.019 13.6403 16.7028C13.6403 17.2001 13.7656 17.6974 13.9537 18.1325L14.0164 18.3191C14.5804 19.5001 15.3324 20.5569 16.3352 21.4893L16.5859 21.7379C16.7738 21.9244 16.9619 22.0488 17.0872 22.2352C18.4033 23.3542 19.9073 24.1623 21.5994 24.5974C21.7875 24.6595 22.0381 24.6595 22.2262 24.7217H22.8528C23.1662 24.7217 23.5422 24.5974 23.7929 24.4731C23.9809 24.3488 24.1062 24.3488 24.2315 24.2245L24.357 24.1001C24.4823 23.9758 24.6076 23.9136 24.733 23.7893C24.8583 23.665 24.9836 23.5407 25.0463 23.4163C25.1717 23.1677 25.2343 22.8568 25.297 22.5461V22.111C25.297 22.111 25.2343 22.0488 25.1089 21.9866Z\" fill=\"white\"/></svg>\n                <svg className=\"footer__img\" width=\"39\" height=\"39\" viewBox=\"0 0 39 39\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><g clipPath=\"url(#clip0_6154_387)\"><path d=\"M19.5 0C8.73036 0 0 8.73036 0 19.5C0 30.2696 8.73036 39 19.5 39C30.2696 39 39 30.2696 39 19.5C39 8.73036 30.2696 0 19.5 0Z\" fill=\"#40B3E0\"/><path d=\"M28.9884 11.2169L25.5054 28.7774C25.5054 28.7774 25.0183 29.9953 23.6788 29.4107L15.6414 23.2487L12.7188 21.8362L7.79905 20.1799C7.79905 20.1799 7.04404 19.9121 6.97091 19.3275C6.89779 18.743 7.82343 18.4264 7.82343 18.4264L27.3807 10.7544C27.3807 10.7544 28.9882 10.0481 28.9882 11.2172\" fill=\"white\"/><path d=\"M15.0237 28.5799C15.0237 28.5799 14.7891 28.558 14.4966 27.6324C14.2046 26.7069 12.7188 21.8358 12.7188 21.8358L24.5312 14.3344C24.5312 14.3344 25.2132 13.9204 25.1888 14.3344C25.1888 14.3344 25.3106 14.4075 24.9451 14.7485C24.5799 15.0896 15.6658 23.1024 15.6658 23.1024\" fill=\"#D2E5F1\"/><path d=\"M18.7228 25.6112L15.5438 28.5097C15.5438 28.5097 15.2952 28.6983 15.0234 28.5801L15.6322 23.1963\" fill=\"#B5CFE4\"/></g><defs><clipPath id=\"clip0_6154_387\"><rect width=\"39\" height=\"39\" fill=\"white\"/></clipPath></defs></svg>\n            </div>\n            \n        </div>\n        <div className=\"footer__fifth\">\n            <h3 className=\"footer__head\">Контакты:</h3>\n            <div className=\"footer__body\">\n                <div className=\"footer__block\">\n                    <a href=\"tel:+77774900091\" className=\"footer__phone\">+7 (777) 490-00-91</a>\n                    <p className=\"footer__additional\">время работы: 9:00-20:00</p>\n                    <a href=\"\" className=\"footer__order\">Заказать звонок</a>\n                </div>\n                <div className=\"footer__block\">\n                    <a href=\"mailto:opt.sultan@mail.ru\" className=\"footer__mail\">opt.sultan@mail.ru</a>\n                    <p className=\"footer__additional\">На связи в любое время</p>                    \n                </div>\n                <div className=\"footer__block\">\n                <svg className=\"footer__img\"  width=\"61\" height=\"39\" viewBox=\"0 0 61 39\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><g clipPath=\"url(#clip0_6154_400)\"><rect width=\"60.9375\" height=\"39\" rx=\"3\" fill=\"#00579F\"/><path d=\"M27.3815 26.6927H23.6299L25.9764 13.2432H29.7279L27.3815 26.6927Z\" fill=\"white\"/><path d=\"M40.9814 13.5726C40.2414 13.3005 39.0678 13 37.6165 13C33.9116 13 31.3027 14.8313 31.2867 17.4496C31.2559 19.3813 33.1546 20.4542 34.5747 21.0983C36.0261 21.7565 36.5195 22.1861 36.5195 22.7728C36.5048 23.6738 35.3467 24.0891 34.2666 24.0891C32.7687 24.0891 31.9662 23.875 30.7465 23.3737L30.2525 23.1588L29.7275 26.178C30.6074 26.5495 32.2286 26.8793 33.9116 26.8937C37.8481 26.8937 40.4109 25.0908 40.4413 22.3006C40.4562 20.7695 39.4536 19.5964 37.2922 18.6378C35.98 18.0224 35.1764 17.6074 35.1764 16.9778C35.1918 16.4054 35.8561 15.8191 37.3373 15.8191C38.5569 15.7903 39.453 16.0621 40.1319 16.334L40.4712 16.4769L40.9814 13.5726Z\" fill=\"white\"/><path d=\"M45.9675 21.928C46.2764 21.1553 47.4653 18.1649 47.4653 18.1649C47.4497 18.1936 47.7737 17.378 47.9589 16.8773L48.2211 18.0362C48.2211 18.0362 48.9315 21.2556 49.0858 21.928C48.4995 21.928 46.7085 21.928 45.9675 21.928ZM50.5984 13.2432H47.6965C46.8016 13.2432 46.1218 13.4862 45.7357 14.3591L40.1631 26.6925H44.0996C44.0996 26.6925 44.7476 25.0325 44.8869 24.675C45.3188 24.675 49.1482 24.675 49.7037 24.675C49.8114 25.1472 50.1514 26.6925 50.1514 26.6925H53.625L50.5984 13.2432Z\" fill=\"white\"/><path d=\"M20.4959 13.2432L16.8218 22.4144L16.4203 20.5544C15.741 18.4082 13.6107 16.0763 11.2334 14.9168L14.5987 26.6784H18.566L24.4629 13.2432H20.4959Z\" fill=\"white\"/><path d=\"M13.4103 13.2432H7.37425L7.3125 13.5149C12.021 14.631 15.1393 17.3213 16.4205 20.555L15.1083 14.3737C14.8923 13.5147 14.2284 13.2715 13.4103 13.2432Z\" fill=\"#FAA61A\"/></g><defs><clipPath id=\"clip0_6154_400\"><rect width=\"61\" height=\"39\" fill=\"white\"/></clipPath></defs></svg>\n                <svg className=\"footer__img_contacts\"  width=\"61\" height=\"39\" viewBox=\"0 0 61 39\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><g clipPath=\"url(#clip0_6154_409)\"><rect width=\"60.9375\" height=\"39\" rx=\"3\" fill=\"#0F3560\"/><path d=\"M35.5648 29.12H24.8623V9.88574H35.5648V29.12Z\" fill=\"#FF5F00\"/><path d=\"M25.5483 19.5013C25.5483 15.5995 27.3752 12.124 30.22 9.88416C28.1397 8.2463 25.5141 7.26872 22.6607 7.26872C15.9055 7.26872 10.4297 12.7453 10.4297 19.5013C10.4297 26.2573 15.9055 31.7339 22.6607 31.7339C25.5141 31.7339 28.1397 30.7563 30.22 29.1185C27.3752 26.8787 25.5483 23.4031 25.5483 19.5013Z\" fill=\"#EB001B\"/><path d=\"M50.0001 19.5013C50.0001 26.2573 44.5243 31.7339 37.7691 31.7339C34.9157 31.7339 32.2901 30.7563 30.209 29.1185C33.0546 26.8787 34.8815 23.4031 34.8815 19.5013C34.8815 15.5995 33.0546 12.124 30.209 9.88416C32.2901 8.2463 34.9157 7.26872 37.7691 7.26872C44.5243 7.26872 50.0001 12.7453 50.0001 19.5013Z\" fill=\"#F79E1B\"/><path d=\"M19.6333 19.5789C19.6333 19.0446 19.9834 18.6056 20.5556 18.6056C21.1023 18.6056 21.4713 19.0257 21.4713 19.5789C21.4713 20.1321 21.1023 20.5522 20.5556 20.5522C19.9834 20.5522 19.6333 20.1132 19.6333 19.5789ZM22.0945 19.5789V18.0589H21.4335V18.428C21.2238 18.1543 20.9057 17.9825 20.4733 17.9825C19.6209 17.9825 18.9526 18.6508 18.9526 19.5789C18.9526 20.5078 19.6209 21.1753 20.4733 21.1753C20.9057 21.1753 21.2238 21.0035 21.4335 20.7298V21.0989H22.0945V19.5789ZM44.4309 19.5789C44.4309 19.0446 44.7811 18.6056 45.3532 18.6056C45.9006 18.6056 46.269 19.0257 46.269 19.5789C46.269 20.1321 45.9006 20.5522 45.3532 20.5522C44.7811 20.5522 44.4309 20.1132 44.4309 19.5789ZM46.8928 19.5789V16.8382H46.2311V18.428C46.0215 18.1543 45.7034 17.9825 45.271 17.9825C44.4185 17.9825 43.7503 18.6508 43.7503 19.5789C43.7503 20.5078 44.4185 21.1753 45.271 21.1753C45.7034 21.1753 46.0215 21.0035 46.2311 20.7298V21.0989H46.8928V19.5789ZM30.2992 18.5743C30.7251 18.5743 30.9988 18.8415 31.0686 19.3117H29.4912C29.5618 18.8728 29.8282 18.5743 30.2992 18.5743ZM30.3123 17.9825C29.4213 17.9825 28.7982 18.6311 28.7982 19.5789C28.7982 20.5456 29.4468 21.1753 30.3567 21.1753C30.8146 21.1753 31.2339 21.061 31.603 20.7494L31.279 20.2595C31.0242 20.4626 30.6996 20.5776 30.3946 20.5776C29.9687 20.5776 29.5807 20.3804 29.4854 19.833H31.7427C31.7493 19.7507 31.7558 19.6677 31.7558 19.5789C31.7493 18.6311 31.164 17.9825 30.3123 17.9825ZM38.2936 19.5789C38.2936 19.0446 38.6437 18.6056 39.2159 18.6056C39.7626 18.6056 40.1316 19.0257 40.1316 19.5789C40.1316 20.1321 39.7626 20.5522 39.2159 20.5522C38.6437 20.5522 38.2936 20.1132 38.2936 19.5789ZM40.7548 19.5789V18.0589H40.0938V18.428C39.8834 18.1543 39.566 17.9825 39.1336 17.9825C38.2812 17.9825 37.6129 18.6508 37.6129 19.5789C37.6129 20.5078 38.2812 21.1753 39.1336 21.1753C39.566 21.1753 39.8834 21.0035 40.0938 20.7298V21.0989H40.7548V19.5789ZM34.5606 19.5789C34.5606 20.5012 35.2027 21.1753 36.1825 21.1753C36.6404 21.1753 36.9454 21.0734 37.2759 20.8128L36.9585 20.2785C36.7103 20.4568 36.4497 20.5522 36.1628 20.5522C35.6351 20.5456 35.2471 20.1642 35.2471 19.5789C35.2471 18.9936 35.6351 18.6122 36.1628 18.6056C36.4497 18.6056 36.7103 18.701 36.9585 18.8793L37.2759 18.345C36.9454 18.0844 36.6404 17.9825 36.1825 17.9825C35.2027 17.9825 34.5606 18.6566 34.5606 19.5789ZM43.0827 17.9825C42.7013 17.9825 42.4531 18.1608 42.2813 18.428V18.0589H41.6261V21.0989H42.2878V19.3947C42.2878 18.8917 42.504 18.6122 42.9364 18.6122C43.0704 18.6122 43.2101 18.6311 43.3499 18.6886L43.5537 18.0655C43.4074 18.008 43.2167 17.9825 43.0827 17.9825ZM25.3637 18.3006C25.0456 18.091 24.6074 17.9825 24.124 17.9825C23.3538 17.9825 22.8581 18.3516 22.8581 18.9558C22.8581 19.4515 23.2272 19.7572 23.9071 19.8526L24.2194 19.897C24.5819 19.948 24.7529 20.0433 24.7529 20.2151C24.7529 20.4503 24.5113 20.5842 24.0599 20.5842C23.6021 20.5842 23.2716 20.4379 23.0488 20.2661L22.7373 20.7807C23.0998 21.0479 23.5577 21.1753 24.0534 21.1753C24.9313 21.1753 25.4401 20.7618 25.4401 20.1831C25.4401 19.6488 25.0398 19.3692 24.3781 19.2739L24.0665 19.2288C23.7804 19.1909 23.5511 19.1341 23.5511 18.9303C23.5511 18.7075 23.7673 18.5743 24.1298 18.5743C24.5178 18.5743 24.8934 18.7206 25.0776 18.8349L25.3637 18.3006ZM33.8924 17.9825C33.5109 17.9825 33.2627 18.1608 33.0916 18.428V18.0589H32.4365V21.0989H33.0974V19.3947C33.0974 18.8917 33.3136 18.6122 33.7461 18.6122C33.88 18.6122 34.0198 18.6311 34.1595 18.6886L34.3634 18.0655C34.217 18.008 34.0263 17.9825 33.8924 17.9825ZM28.2515 18.0589H27.1705V17.1366H26.5022V18.0589H25.8856V18.6631H26.5022V20.0499C26.5022 20.7553 26.7759 21.1753 27.5577 21.1753C27.8446 21.1753 28.175 21.0865 28.3847 20.9402L28.194 20.3738C27.9967 20.4881 27.7805 20.5456 27.6087 20.5456C27.2782 20.5456 27.1705 20.3418 27.1705 20.0368V18.6631H28.2515V18.0589ZM18.3681 21.0989V19.1909C18.3681 18.4724 17.9102 17.9891 17.1721 17.9825C16.7841 17.9759 16.3837 18.0968 16.1034 18.5234C15.8938 18.1863 15.5633 17.9825 15.0989 17.9825C14.7742 17.9825 14.4568 18.0779 14.2086 18.4338V18.0589H13.5469V21.0989H14.2144V19.4137C14.2144 18.8859 14.507 18.6056 14.9591 18.6056C15.3981 18.6056 15.6201 18.8917 15.6201 19.4071V21.0989H16.2883V19.4137C16.2883 18.8859 16.5933 18.6056 17.0323 18.6056C17.4836 18.6056 17.6998 18.8917 17.6998 19.4071V21.0989H18.3681Z\" fill=\"white\"/></g><defs><clipPath id=\"clip0_6154_409\"><rect width=\"61\" height=\"39\" fill=\"white\"/></clipPath></defs></svg>\n                </div>\n            </div>\n        </div>\n    </section>\n</div>\n    )\n}\n\nexport default Footer",{"ruleId":"260","severity":1,"message":"261","line":18,"column":11,"nodeType":"262","messageId":"263","endLine":18,"endColumn":16},{"ruleId":"264","severity":1,"message":"265","line":36,"column":77,"nodeType":"266","messageId":"267","endLine":36,"endColumn":79},{"ruleId":"264","severity":1,"message":"265","line":50,"column":29,"nodeType":"266","messageId":"267","endLine":50,"endColumn":31},{"ruleId":"268","severity":1,"message":"269","line":60,"column":6,"nodeType":"270","endLine":60,"endColumn":19,"suggestions":"271"},{"ruleId":"264","severity":1,"message":"265","line":71,"column":27,"nodeType":"266","messageId":"267","endLine":71,"endColumn":29},{"ruleId":"268","severity":1,"message":"272","line":78,"column":6,"nodeType":"270","endLine":78,"endColumn":18,"suggestions":"273"},{"ruleId":"264","severity":1,"message":"265","line":88,"column":77,"nodeType":"266","messageId":"267","endLine":88,"endColumn":79},{"ruleId":"268","severity":1,"message":"274","line":92,"column":6,"nodeType":"270","endLine":92,"endColumn":23,"suggestions":"275"},{"ruleId":"264","severity":1,"message":"265","line":109,"column":27,"nodeType":"266","messageId":"267","endLine":109,"endColumn":29},{"ruleId":"268","severity":1,"message":"276","line":116,"column":6,"nodeType":"270","endLine":116,"endColumn":19,"suggestions":"277"},{"ruleId":"260","severity":1,"message":"278","line":1,"column":31,"nodeType":"262","messageId":"263","endLine":1,"endColumn":38},{"ruleId":"268","severity":1,"message":"279","line":22,"column":10,"nodeType":"270","endLine":22,"endColumn":23,"suggestions":"280"},{"ruleId":"260","severity":1,"message":"281","line":1,"column":20,"nodeType":"262","messageId":"263","endLine":1,"endColumn":28},{"ruleId":"264","severity":1,"message":"265","line":24,"column":53,"nodeType":"266","messageId":"267","endLine":24,"endColumn":55},{"ruleId":"264","severity":1,"message":"265","line":34,"column":28,"nodeType":"266","messageId":"267","endLine":34,"endColumn":30},{"ruleId":"260","severity":1,"message":"278","line":1,"column":31,"nodeType":"262","messageId":"263","endLine":1,"endColumn":38},{"ruleId":"268","severity":1,"message":"279","line":20,"column":10,"nodeType":"270","endLine":20,"endColumn":23,"suggestions":"282"},{"ruleId":"268","severity":1,"message":"279","line":31,"column":10,"nodeType":"270","endLine":31,"endColumn":23,"suggestions":"283"},{"ruleId":"260","severity":1,"message":"278","line":1,"column":31,"nodeType":"262","messageId":"263","endLine":1,"endColumn":38},{"ruleId":"260","severity":1,"message":"284","line":20,"column":11,"nodeType":"262","messageId":"263","endLine":20,"endColumn":24},{"ruleId":"268","severity":1,"message":"285","line":43,"column":7,"nodeType":"270","endLine":43,"endColumn":26,"suggestions":"286"},{"ruleId":"268","severity":1,"message":"287","line":51,"column":8,"nodeType":"270","endLine":51,"endColumn":15,"suggestions":"288"},{"ruleId":"268","severity":1,"message":"289","line":59,"column":8,"nodeType":"270","endLine":59,"endColumn":21,"suggestions":"290"},{"ruleId":"260","severity":1,"message":"291","line":1,"column":10,"nodeType":"262","messageId":"263","endLine":1,"endColumn":14},{"ruleId":"260","severity":1,"message":"291","line":1,"column":10,"nodeType":"262","messageId":"263","endLine":1,"endColumn":14},{"ruleId":"260","severity":1,"message":"278","line":1,"column":20,"nodeType":"262","messageId":"263","endLine":1,"endColumn":27},{"ruleId":"260","severity":1,"message":"292","line":11,"column":5,"nodeType":"262","messageId":"263","endLine":11,"endColumn":19},{"ruleId":"260","severity":1,"message":"293","line":2,"column":10,"nodeType":"262","messageId":"263","endLine":2,"endColumn":16},{"ruleId":"264","severity":1,"message":"265","line":29,"column":20,"nodeType":"266","messageId":"267","endLine":29,"endColumn":22},{"ruleId":"260","severity":1,"message":"278","line":1,"column":20,"nodeType":"262","messageId":"263","endLine":1,"endColumn":27},{"ruleId":"264","severity":1,"message":"265","line":20,"column":90,"nodeType":"266","messageId":"267","endLine":20,"endColumn":92},{"ruleId":"264","severity":1,"message":"265","line":24,"column":96,"nodeType":"266","messageId":"267","endLine":24,"endColumn":98},{"ruleId":"260","severity":1,"message":"294","line":32,"column":14,"nodeType":"262","messageId":"263","endLine":32,"endColumn":28},{"ruleId":"260","severity":1,"message":"295","line":42,"column":12,"nodeType":"262","messageId":"263","endLine":42,"endColumn":26},{"ruleId":"260","severity":1,"message":"296","line":17,"column":22,"nodeType":"262","messageId":"263","endLine":17,"endColumn":33},{"ruleId":"268","severity":1,"message":"279","line":26,"column":10,"nodeType":"270","endLine":26,"endColumn":23,"suggestions":"297"},{"ruleId":"264","severity":1,"message":"265","line":40,"column":28,"nodeType":"266","messageId":"267","endLine":40,"endColumn":30},{"ruleId":"264","severity":1,"message":"265","line":40,"column":62,"nodeType":"266","messageId":"267","endLine":40,"endColumn":64},{"ruleId":"264","severity":1,"message":"265","line":42,"column":35,"nodeType":"266","messageId":"267","endLine":42,"endColumn":37},{"ruleId":"264","severity":1,"message":"265","line":42,"column":69,"nodeType":"266","messageId":"267","endLine":42,"endColumn":71},{"ruleId":"264","severity":1,"message":"265","line":44,"column":35,"nodeType":"266","messageId":"267","endLine":44,"endColumn":37},{"ruleId":"264","severity":1,"message":"265","line":44,"column":69,"nodeType":"266","messageId":"267","endLine":44,"endColumn":71},{"ruleId":"264","severity":1,"message":"265","line":46,"column":35,"nodeType":"266","messageId":"267","endLine":46,"endColumn":37},{"ruleId":"264","severity":1,"message":"265","line":46,"column":69,"nodeType":"266","messageId":"267","endLine":46,"endColumn":71},{"ruleId":"260","severity":1,"message":"298","line":102,"column":11,"nodeType":"262","messageId":"263","endLine":102,"endColumn":28},{"ruleId":"264","severity":1,"message":"265","line":104,"column":25,"nodeType":"266","messageId":"267","endLine":104,"endColumn":27},{"ruleId":"264","severity":1,"message":"265","line":106,"column":31,"nodeType":"266","messageId":"267","endLine":106,"endColumn":33},{"ruleId":"268","severity":1,"message":"299","line":109,"column":8,"nodeType":"270","endLine":109,"endColumn":18,"suggestions":"300"},{"ruleId":"301","severity":1,"message":"302","line":117,"column":27,"nodeType":"303","messageId":"304","endLine":117,"endColumn":78},{"ruleId":"264","severity":1,"message":"265","line":119,"column":37,"nodeType":"266","messageId":"267","endLine":119,"endColumn":39},{"ruleId":"268","severity":1,"message":"305","line":124,"column":8,"nodeType":"270","endLine":124,"endColumn":57,"suggestions":"306"},{"ruleId":"264","severity":1,"message":"265","line":140,"column":29,"nodeType":"266","messageId":"267","endLine":140,"endColumn":31},{"ruleId":"268","severity":1,"message":"307","line":145,"column":8,"nodeType":"270","endLine":145,"endColumn":39,"suggestions":"308"},{"ruleId":"260","severity":1,"message":"278","line":1,"column":20,"nodeType":"262","messageId":"263","endLine":1,"endColumn":27},{"ruleId":"260","severity":1,"message":"281","line":1,"column":29,"nodeType":"262","messageId":"263","endLine":1,"endColumn":37},{"ruleId":"309","severity":1,"message":"310","line":40,"column":29,"nodeType":"311","endLine":40,"endColumn":69},{"ruleId":"309","severity":1,"message":"310","line":43,"column":29,"nodeType":"311","endLine":43,"endColumn":69},{"ruleId":"309","severity":1,"message":"310","line":46,"column":29,"nodeType":"311","endLine":46,"endColumn":69},{"ruleId":"309","severity":1,"message":"310","line":49,"column":29,"nodeType":"311","endLine":49,"endColumn":69},{"ruleId":"309","severity":1,"message":"310","line":74,"column":29,"nodeType":"311","endLine":74,"endColumn":71},{"ruleId":"260","severity":1,"message":"278","line":1,"column":31,"nodeType":"262","messageId":"263","endLine":1,"endColumn":38},{"ruleId":"268","severity":1,"message":"312","line":25,"column":8,"nodeType":"270","endLine":25,"endColumn":17,"suggestions":"313"},{"ruleId":"264","severity":1,"message":"265","line":36,"column":29,"nodeType":"266","messageId":"267","endLine":36,"endColumn":31},{"ruleId":"268","severity":1,"message":"314","line":28,"column":8,"nodeType":"270","endLine":28,"endColumn":18,"suggestions":"315"},{"ruleId":"264","severity":1,"message":"265","line":34,"column":30,"nodeType":"266","messageId":"267","endLine":34,"endColumn":32},{"ruleId":"264","severity":1,"message":"265","line":36,"column":37,"nodeType":"266","messageId":"267","endLine":36,"endColumn":39},{"ruleId":"264","severity":1,"message":"265","line":38,"column":40,"nodeType":"266","messageId":"267","endLine":38,"endColumn":42},{"ruleId":"264","severity":1,"message":"265","line":40,"column":36,"nodeType":"266","messageId":"267","endLine":40,"endColumn":38},{"ruleId":"264","severity":1,"message":"265","line":42,"column":39,"nodeType":"266","messageId":"267","endLine":42,"endColumn":41},{"ruleId":"264","severity":1,"message":"265","line":44,"column":40,"nodeType":"266","messageId":"267","endLine":44,"endColumn":42},{"ruleId":"264","severity":1,"message":"265","line":46,"column":37,"nodeType":"266","messageId":"267","endLine":46,"endColumn":39},{"ruleId":"264","severity":1,"message":"265","line":48,"column":42,"nodeType":"266","messageId":"267","endLine":48,"endColumn":44},{"ruleId":"264","severity":1,"message":"265","line":50,"column":37,"nodeType":"266","messageId":"267","endLine":50,"endColumn":39},{"ruleId":"264","severity":1,"message":"265","line":52,"column":47,"nodeType":"266","messageId":"267","endLine":52,"endColumn":49},{"ruleId":"268","severity":1,"message":"316","line":71,"column":8,"nodeType":"270","endLine":71,"endColumn":21,"suggestions":"317"},{"ruleId":"268","severity":1,"message":"316","line":88,"column":8,"nodeType":"270","endLine":88,"endColumn":19,"suggestions":"318"},{"ruleId":"264","severity":1,"message":"265","line":111,"column":25,"nodeType":"266","messageId":"267","endLine":111,"endColumn":27},{"ruleId":"268","severity":1,"message":"319","line":24,"column":7,"nodeType":"270","endLine":24,"endColumn":16,"suggestions":"320"},{"ruleId":"264","severity":1,"message":"265","line":75,"column":22,"nodeType":"266","messageId":"267","endLine":75,"endColumn":24},{"ruleId":"264","severity":1,"message":"265","line":78,"column":29,"nodeType":"266","messageId":"267","endLine":78,"endColumn":31},{"ruleId":"264","severity":1,"message":"265","line":16,"column":20,"nodeType":"266","messageId":"267","endLine":16,"endColumn":22},{"ruleId":"260","severity":1,"message":"278","line":1,"column":31,"nodeType":"262","messageId":"263","endLine":1,"endColumn":38},{"ruleId":"260","severity":1,"message":"321","line":4,"column":8,"nodeType":"262","messageId":"263","endLine":4,"endColumn":17},{"ruleId":"268","severity":1,"message":"289","line":19,"column":8,"nodeType":"270","endLine":19,"endColumn":21,"suggestions":"322"},{"ruleId":"268","severity":1,"message":"323","line":26,"column":8,"nodeType":"270","endLine":26,"endColumn":19,"suggestions":"324"},{"ruleId":"268","severity":1,"message":"323","line":39,"column":7,"nodeType":"270","endLine":39,"endColumn":20,"suggestions":"325"},{"ruleId":"264","severity":1,"message":"265","line":90,"column":22,"nodeType":"266","messageId":"267","endLine":90,"endColumn":24},{"ruleId":"264","severity":1,"message":"265","line":93,"column":29,"nodeType":"266","messageId":"267","endLine":93,"endColumn":31},{"ruleId":"264","severity":1,"message":"265","line":27,"column":43,"nodeType":"266","messageId":"267","endLine":27,"endColumn":45},{"ruleId":"264","severity":1,"message":"265","line":29,"column":49,"nodeType":"266","messageId":"267","endLine":29,"endColumn":51},{"ruleId":"264","severity":1,"message":"265","line":31,"column":53,"nodeType":"266","messageId":"267","endLine":31,"endColumn":55},{"ruleId":"309","severity":1,"message":"310","line":21,"column":13,"nodeType":"311","endLine":21,"endColumn":50},{"ruleId":"309","severity":1,"message":"310","line":22,"column":13,"nodeType":"311","endLine":22,"endColumn":50},{"ruleId":"309","severity":1,"message":"310","line":23,"column":13,"nodeType":"311","endLine":23,"endColumn":49},{"ruleId":"309","severity":1,"message":"310","line":24,"column":13,"nodeType":"311","endLine":24,"endColumn":49},{"ruleId":"309","severity":1,"message":"310","line":28,"column":17,"nodeType":"311","endLine":28,"endColumn":53},{"ruleId":"309","severity":1,"message":"310","line":29,"column":17,"nodeType":"311","endLine":29,"endColumn":53},{"ruleId":"309","severity":1,"message":"310","line":30,"column":17,"nodeType":"311","endLine":30,"endColumn":53},{"ruleId":"309","severity":1,"message":"310","line":31,"column":17,"nodeType":"311","endLine":31,"endColumn":53},{"ruleId":"309","severity":1,"message":"310","line":32,"column":17,"nodeType":"311","endLine":32,"endColumn":53},{"ruleId":"309","severity":1,"message":"310","line":53,"column":21,"nodeType":"311","endLine":53,"endColumn":58},"@typescript-eslint/no-unused-vars","'goods' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'goods', 'orderList', and 'sumOfMoneyArray'. Either include them or remove the dependency array. You can also do a functional update 'setOrderList(o => ...)' if you only need 'orderList' in the 'setOrderList' call.","ArrayExpression",["326"],"React Hook useEffect has a missing dependency: 'sumOfMoneyArray'. Either include it or remove the dependency array.",["327"],"React Hook useMemo has a missing dependency: 'goods'. Either include it or remove the dependency array.",["328"],"React Hook useMemo has missing dependencies: 'orderList' and 'sumOfMoneyArray'. Either include them or remove the dependency array. You can also do a functional update 'setOrderList(o => ...)' if you only need 'orderList' in the 'setOrderList' call.",["329"],"'useMemo' is defined but never used.","React Hook useEffect has a missing dependency: 'onProductTypeChange'. Either include it or remove the dependency array. If 'onProductTypeChange' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["330"],"'useState' is defined but never used.",["331"],["332"],"'basketChanger' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'orderList'. Either include it or remove the dependency array.",["333"],"React Hook useEffect has a missing dependency: 'onOrderThingChange'. Either include it or remove the dependency array. If 'onOrderThingChange' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["334"],"React Hook useEffect has a missing dependency: 'onRemove'. Either include it or remove the dependency array. If 'onRemove' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["335"],"'type' is defined but never used.","'boxesArray' is assigned a value but never used.","'IGoods' is defined but never used.","'getSortedGoods' is defined but never used.","'selectedFilter' is assigned a value but never used.","'setProducts' is assigned a value but never used.",["336"],"'checkboxArraySost' is assigned a value but never used.","React Hook useMemo has a missing dependency: 'checkboxArray'. Either include it or remove the dependency array. You can also do a functional update 'setCheckboxArray(c => ...)' if you only need 'checkboxArray' in the 'setCheckboxArray' call.",["337"],"no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'goodsByCheckboxArray'.","ArrowFunctionExpression","unsafeRefs","React Hook useMemo has a missing dependency: 'checkbox'. Either include it or remove the dependency array.",["338"],"React Hook useMemo has a missing dependency: 'pagesArray'. Either include it or remove the dependency array.",["339"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","React Hook useEffect has missing dependencies: 'onTotalChange' and 'order.id'. Either include them or remove the dependency array. If 'onTotalChange' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["340"],"React Hook useEffect has a missing dependency: 'onGoodsUpdate'. Either include it or remove the dependency array. If 'onGoodsUpdate' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["341"],"React Hook useMemo has a missing dependency: 'products'. Either include it or remove the dependency array. You can also do a functional update 'setProducts(p => ...)' if you only need 'products' in the 'setProducts' call.",["342"],["343"],"React Hook useEffect has a missing dependency: 'create'. Either include it or remove the dependency array. If 'create' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["344"],"'GoodsItem' is defined but never used.",["345"],"React Hook useEffect has a missing dependency: 'onEdit'. Either include it or remove the dependency array. If 'onEdit' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["346"],["347"],{"desc":"348","fix":"349"},{"desc":"350","fix":"351"},{"desc":"352","fix":"353"},{"desc":"354","fix":"355"},{"desc":"356","fix":"357"},{"desc":"356","fix":"358"},{"desc":"356","fix":"359"},{"desc":"360","fix":"361"},{"desc":"362","fix":"363"},{"desc":"364","fix":"365"},{"desc":"356","fix":"366"},{"desc":"367","fix":"368"},{"desc":"369","fix":"370"},{"desc":"371","fix":"372"},{"desc":"373","fix":"374"},{"desc":"375","fix":"376"},{"desc":"377","fix":"378"},{"desc":"379","fix":"380"},{"desc":"381","fix":"382"},{"desc":"364","fix":"383"},{"desc":"384","fix":"385"},{"desc":"386","fix":"387"},"Update the dependencies array to be: [goods, orderList, productType, sumOfMoneyArray]",{"range":"388","text":"389"},"Update the dependencies array to be: [orderThing, sumOfMoneyArray]",{"range":"390","text":"391"},"Update the dependencies array to be: [goods, sumOfMoneyArray]",{"range":"392","text":"393"},"Update the dependencies array to be: [orderList, removeThing?.id, sumOfMoneyArray]",{"range":"394","text":"395"},"Update the dependencies array to be: [onProductTypeChange, productType]",{"range":"396","text":"397"},{"range":"398","text":"397"},{"range":"399","text":"397"},"Update the dependencies array to be: [basketThingsArray, orderList]",{"range":"400","text":"401"},"Update the dependencies array to be: [onOrderThingChange, total]",{"range":"402","text":"403"},"Update the dependencies array to be: [onRemove, removeThing]",{"range":"404","text":"405"},{"range":"406","text":"397"},"Update the dependencies array to be: [checkbox, checkboxArray]",{"range":"407","text":"408"},"Update the dependencies array to be: [checkbox, checkboxArray, sortedFiltreadSearchedPriceGoods]",{"range":"409","text":"410"},"Update the dependencies array to be: [pagesArray, pageNumber, finalFiltredGoods]",{"range":"411","text":"412"},"Update the dependencies array to be: [counter, onTotalChange, order.id]",{"range":"413","text":"414"},"Update the dependencies array to be: [onGoodsUpdate, products]",{"range":"415","text":"416"},"Update the dependencies array to be: [products, removeThing?.id]",{"range":"417","text":"418"},"Update the dependencies array to be: [editThing, products]",{"range":"419","text":"420"},"Update the dependencies array to be: [create, product]",{"range":"421","text":"422"},{"range":"423","text":"405"},"Update the dependencies array to be: [editThing, onEdit]",{"range":"424","text":"425"},"Update the dependencies array to be: [editProduct, onEdit]",{"range":"426","text":"427"},[2021,2034],"[goods, orderList, productType, sumOfMoneyArray]",[2607,2619],"[orderThing, sumOfMoneyArray]",[3094,3111],"[goods, sumOfMoneyArray]",[3729,3742],"[orderList, removeThing?.id, sumOfMoneyArray]",[671,684],"[onProductTypeChange, productType]",[653,666],[984,997],[1552,1571],"[basketThingsArray, orderList]",[1742,1749],"[onOrderThingChange, total]",[1968,1981],"[onRemove, removeThing]",[903,916],[4555,4565],"[checkbox, checkboxArray]",[5196,5245],"[checkbox, checkboxArray, sortedFiltreadSearchedPriceGoods]",[5960,5991],"[pagesArray, pageNumber, finalFiltredGoods]",[704,713],"[counter, onTotalChange, order.id]",[940,950],"[onGoodsUpdate, products]",[2398,2411],"[products, removeThing?.id]",[2970,2981],"[editThing, products]",[856,865],"[create, product]",[573,586],[721,732],"[editThing, onEdit]",[1315,1328],"[editProduct, onEdit]"]